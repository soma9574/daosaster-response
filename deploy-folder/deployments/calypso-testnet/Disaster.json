{
  "address": "0xF58d5d8C5f42F4106530dB44ce427f622dE6f1A0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "_latitude",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "_longitude",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_firstAgent",
          "type": "address"
        },
        {
          "internalType": "enum Disaster.AgentType",
          "name": "_firstAgentType",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "_daoAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "agent",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "enum Disaster.AgentType",
          "name": "agentType",
          "type": "uint8"
        }
      ],
      "name": "AgentAttached",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "individual",
          "type": "address"
        }
      ],
      "name": "IndividualAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "organization",
          "type": "address"
        }
      ],
      "name": "OrganizationAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_skills",
          "type": "string"
        }
      ],
      "name": "addIndividual",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_expertise",
          "type": "string"
        }
      ],
      "name": "addOrganization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "agents",
      "outputs": [
        {
          "internalType": "address",
          "name": "agentAddress",
          "type": "address"
        },
        {
          "internalType": "enum Disaster.AgentType",
          "name": "agentType",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_individualIndex",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_task",
          "type": "string"
        }
      ],
      "name": "assignTaskToIndividual",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_orgIndex",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_task",
          "type": "string"
        }
      ],
      "name": "assignTaskToOrganization",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_agent",
          "type": "address"
        },
        {
          "internalType": "enum Disaster.AgentType",
          "name": "_agentType",
          "type": "uint8"
        }
      ],
      "name": "attachAgent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        }
      ],
      "name": "createFundingProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "dao",
      "outputs": [
        {
          "internalType": "contract DisasterResponseDAO",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_agentIndex",
          "type": "uint256"
        }
      ],
      "name": "executeAgentAction",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAgents",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "agentAddress",
              "type": "address"
            },
            {
              "internalType": "enum Disaster.AgentType",
              "name": "agentType",
              "type": "uint8"
            }
          ],
          "internalType": "struct Disaster.Agent[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getIndividualsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOrganizationsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "individuals",
      "outputs": [
        {
          "internalType": "contract Individual",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latitude",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "longitude",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "organizations",
      "outputs": [
        {
          "internalType": "contract HumanOrganization",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "timestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x44c155b81d46a33f7a442f8083573d5088ef172606f3f6ce4a17df63c2f35df5",
  "receipt": {
    "to": "0x0000000000000000000000000000000000000000",
    "from": "0xD7d201B7B9FceE8F7e77cb3DB8C77A93caef2D42",
    "contractAddress": "0xF58d5d8C5f42F4106530dB44ce427f622dE6f1A0",
    "transactionIndex": 0,
    "gasUsed": "4146010",
    "logsBloom": "0x
    "blockHash": "0x377c73c2d3cdc0564dc4c75c871ced3de61fa082ab2eda0e5967b31a82c5be4c",
    "transactionHash": "0x44c155b81d46a33f7a442f8083573d5088ef172606f3f6ce4a17df63c2f35df5",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2312447,
        "transactionHash": "0x44c155b81d46a33f7a442f8083573d5088ef172606f3f6ce4a17df63c2f35df5",
        "address": "0xF58d5d8C5f42F4106530dB44ce427f622dE6f1A0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d7d201b7b9fcee8f7e77cb3db8c77a93caef2d42"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x377c73c2d3cdc0564dc4c75c871ced3de61fa082ab2eda0e5967b31a82c5be4c"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 2312447,
        "transactionHash": "0x44c155b81d46a33f7a442f8083573d5088ef172606f3f6ce4a17df63c2f35df5",
        "address": "0xF58d5d8C5f42F4106530dB44ce427f622dE6f1A0",
        "topics": [
          "0x9f4c195fb507ad6d3407735a60c78b30a7bdfa431d42a2cf0329a3aa597efd54"
        ],
        "data": "0x000000000000000000000000d7d201b7b9fcee8f7e77cb3db8c77a93caef2d420000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 1,
        "blockHash": "0x377c73c2d3cdc0564dc4c75c871ced3de61fa082ab2eda0e5967b31a82c5be4c"
      }
    ],
    "blockNumber": 2312447,
    "cumulativeGasUsed": "4146010",
    "status": 1,
    "byzantium": true
  },
  "args": [
    123456,
    789012,
    1729367702,
    "0xD7d201B7B9FceE8F7e77cb3DB8C77A93caef2D42",
    0,
    "0x3E625A41194b29029b7e1e75503CCCFf93497D52"
  ],
  "numDeployments": 1,
  "solcInputHash": "fcbf6996c81b3bd9dd32542bf0ca0e14",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_latitude\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"_longitude\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_firstAgent\",\"type\":\"address\"},{\"internalType\":\"enum Disaster.AgentType\",\"name\":\"_firstAgentType\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"_daoAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"enum Disaster.AgentType\",\"name\":\"agentType\",\"type\":\"uint8\"}],\"name\":\"AgentAttached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"individual\",\"type\":\"address\"}],\"name\":\"IndividualAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"organization\",\"type\":\"address\"}],\"name\":\"OrganizationAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_skills\",\"type\":\"string\"}],\"name\":\"addIndividual\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_expertise\",\"type\":\"string\"}],\"name\":\"addOrganization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"agents\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"agentAddress\",\"type\":\"address\"},{\"internalType\":\"enum Disaster.AgentType\",\"name\":\"agentType\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_individualIndex\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_task\",\"type\":\"string\"}],\"name\":\"assignTaskToIndividual\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_orgIndex\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_task\",\"type\":\"string\"}],\"name\":\"assignTaskToOrganization\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_agent\",\"type\":\"address\"},{\"internalType\":\"enum Disaster.AgentType\",\"name\":\"_agentType\",\"type\":\"uint8\"}],\"name\":\"attachAgent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"createFundingProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dao\",\"outputs\":[{\"internalType\":\"contract DisasterResponseDAO\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_agentIndex\",\"type\":\"uint256\"}],\"name\":\"executeAgentAction\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAgents\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"agentAddress\",\"type\":\"address\"},{\"internalType\":\"enum Disaster.AgentType\",\"name\":\"agentType\",\"type\":\"uint8\"}],\"internalType\":\"struct Disaster.Agent[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIndividualsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOrganizationsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"individuals\",\"outputs\":[{\"internalType\":\"contract Individual\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latitude\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"longitude\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"organizations\",\"outputs\":[{\"internalType\":\"contract HumanOrganization\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Disaster.sol\":\"Disaster\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/Disaster.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./HumanOrganization.sol\\\";\\nimport \\\"./Individual.sol\\\";\\nimport \\\"./DisasterResponseDAO.sol\\\";\\nimport \\\"./agents/GlobalAgent.sol\\\";\\nimport \\\"./agents/RegionalAgent.sol\\\";\\nimport \\\"./agents/LocalAgent.sol\\\";\\n\\ncontract Disaster is Ownable {\\n    enum AgentType {\\n        FirstResponder,\\n        Volunteer,\\n        Other\\n    }\\n\\n    struct Agent {\\n        address agentAddress;\\n        AgentType agentType;\\n    }\\n\\n    int256 public latitude;\\n    int256 public longitude;\\n    uint256 public timestamp;\\n    Agent[] public agents;\\n    HumanOrganization[] public organizations;\\n    Individual[] public individuals;\\n    DisasterResponseDAO public dao;\\n\\n    event AgentAttached(address agent, AgentType agentType);\\n    event OrganizationAdded(address organization);\\n    event IndividualAdded(address individual);\\n\\n    constructor(\\n        int256 _latitude,\\n        int256 _longitude,\\n        uint256 _timestamp,\\n        address _firstAgent,\\n        AgentType _firstAgentType,\\n        address _daoAddress\\n    ) {\\n        latitude = _latitude;\\n        longitude = _longitude;\\n        timestamp = _timestamp;\\n        agents.push(Agent(_firstAgent, _firstAgentType));\\n        dao = DisasterResponseDAO(_daoAddress);\\n        emit AgentAttached(_firstAgent, _firstAgentType);\\n    }\\n\\n    function attachAgent(\\n        address _agent,\\n        AgentType _agentType\\n    ) external onlyOwner {\\n        agents.push(Agent(_agent, _agentType));\\n        emit AgentAttached(_agent, _agentType);\\n    }\\n\\n    function addOrganization(\\n        string memory _name,\\n        string memory _expertise\\n    ) external onlyOwner {\\n        HumanOrganization newOrg = new HumanOrganization(_name, _expertise);\\n        organizations.push(newOrg);\\n        emit OrganizationAdded(address(newOrg));\\n    }\\n\\n    function addIndividual(\\n        string memory _name,\\n        string memory _skills\\n    ) external onlyOwner {\\n        Individual newIndividual = new Individual(_name, _skills);\\n        individuals.push(newIndividual);\\n        emit IndividualAdded(address(newIndividual));\\n    }\\n\\n    function assignTaskToOrganization(\\n        uint256 _orgIndex,\\n        string memory _task\\n    ) external onlyOwner {\\n        require(_orgIndex < organizations.length, \\\"Invalid organization index\\\");\\n        organizations[_orgIndex].assignTask(_task);\\n    }\\n\\n    function assignTaskToIndividual(\\n        uint256 _individualIndex,\\n        string memory _task\\n    ) external onlyOwner {\\n        require(\\n            _individualIndex < individuals.length,\\n            \\\"Invalid individual index\\\"\\n        );\\n        individuals[_individualIndex].assignTask(_task);\\n    }\\n\\n    function getAgents() external view returns (Agent[] memory) {\\n        return agents;\\n    }\\n\\n    function getOrganizationsCount() external view returns (uint256) {\\n        return organizations.length;\\n    }\\n\\n    function getIndividualsCount() external view returns (uint256) {\\n        return individuals.length;\\n    }\\n\\n    function createFundingProposal(\\n        uint256 _amount,\\n        string memory _description\\n    ) external onlyOwner {\\n        dao.createProposal(_amount, _description);\\n    }\\n\\n    function executeAgentAction(uint256 _agentIndex) external view onlyOwner {\\n        require(_agentIndex < agents.length, \\\"Invalid agent index\\\");\\n        Agent memory agent = agents[_agentIndex];\\n\\n        if (agent.agentType == AgentType.FirstResponder) {\\n            GlobalAgent(agent.agentAddress).monitorGlobalNews();\\n        } else if (agent.agentType == AgentType.Volunteer) {\\n            RegionalAgent(agent.agentAddress).monitorRegionalCommunications();\\n        } else if (agent.agentType == AgentType.Other) {\\n            LocalAgent(agent.agentAddress).monitorLocalSensors();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x743ae0cc3ff2725b85787a24bb1b8469c2cd670fc096a13e501511cdb7428c10\",\"license\":\"MIT\"},\"contracts/DisasterResponseDAO.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract DisasterResponseDAO is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    struct Proposal {\\n        uint256 id;\\n        address proposer;\\n        uint256 amount;\\n        string description;\\n        uint256 yesVotes;\\n        uint256 noVotes;\\n        bool executed;\\n        mapping(address => bool) hasVoted;\\n    }\\n\\n    IERC20 public token;\\n    mapping(address => bool) public isAgent;\\n    mapping(uint256 => Proposal) public proposals;\\n    uint256 public proposalCount;\\n    uint256 public quorum;\\n    uint256 public votingPeriod;\\n\\n    event AgentAdded(address agent);\\n    event AgentRemoved(address agent);\\n    event ProposalCreated(\\n        uint256 proposalId,\\n        address proposer,\\n        uint256 amount,\\n        string description\\n    );\\n    event Voted(uint256 proposalId, address voter, bool inSupport);\\n    event ProposalExecuted(uint256 proposalId);\\n\\n    constructor(address _token, uint256 _quorum, uint256 _votingPeriod) {\\n        token = IERC20(_token);\\n        quorum = _quorum;\\n        votingPeriod = _votingPeriod;\\n    }\\n\\n    modifier onlyAgent() {\\n        require(isAgent[msg.sender], \\\"Not an authorized agent\\\");\\n        _;\\n    }\\n\\n    function addAgent(address _agent) external onlyOwner {\\n        isAgent[_agent] = true;\\n        emit AgentAdded(_agent);\\n    }\\n\\n    function removeAgent(address _agent) external onlyOwner {\\n        isAgent[_agent] = false;\\n        emit AgentRemoved(_agent);\\n    }\\n\\n    function createProposal(\\n        uint256 _amount,\\n        string memory _description\\n    ) external onlyAgent {\\n        proposalCount++;\\n        Proposal storage newProposal = proposals[proposalCount];\\n        newProposal.id = proposalCount;\\n        newProposal.proposer = msg.sender;\\n        newProposal.amount = _amount;\\n        newProposal.description = _description;\\n\\n        emit ProposalCreated(proposalCount, msg.sender, _amount, _description);\\n    }\\n\\n    function vote(uint256 _proposalId, bool _inSupport) external onlyAgent {\\n        Proposal storage proposal = proposals[_proposalId];\\n        require(!proposal.hasVoted[msg.sender], \\\"Already voted\\\");\\n        require(!proposal.executed, \\\"Proposal already executed\\\");\\n\\n        proposal.hasVoted[msg.sender] = true;\\n        if (_inSupport) {\\n            proposal.yesVotes++;\\n        } else {\\n            proposal.noVotes++;\\n        }\\n\\n        emit Voted(_proposalId, msg.sender, _inSupport);\\n\\n        if (\\n            proposal.yesVotes > quorum && proposal.yesVotes > proposal.noVotes\\n        ) {\\n            executeProposal(_proposalId);\\n        }\\n    }\\n\\n    function executeProposal(uint256 _proposalId) internal {\\n        Proposal storage proposal = proposals[_proposalId];\\n        require(!proposal.executed, \\\"Proposal already executed\\\");\\n        require(\\n            token.balanceOf(address(this)) >= proposal.amount,\\n            \\\"Insufficient funds\\\"\\n        );\\n\\n        proposal.executed = true;\\n        token.safeTransfer(proposal.proposer, proposal.amount);\\n\\n        emit ProposalExecuted(_proposalId);\\n    }\\n\\n    function depositFunds(uint256 _amount) external {\\n        require(_amount > 0, \\\"Amount must be greater than 0\\\");\\n        token.safeTransferFrom(msg.sender, address(this), _amount);\\n    }\\n\\n    function withdrawFunds(uint256 _amount) external onlyOwner {\\n        require(_amount > 0, \\\"Amount must be greater than 0\\\");\\n        require(\\n            token.balanceOf(address(this)) >= _amount,\\n            \\\"Insufficient funds\\\"\\n        );\\n        token.safeTransfer(msg.sender, _amount);\\n    }\\n\\n    function getProposalDetails(\\n        uint256 _proposalId\\n    )\\n        external\\n        view\\n        returns (\\n            address proposer,\\n            uint256 amount,\\n            string memory description,\\n            uint256 yesVotes,\\n            uint256 noVotes,\\n            bool executed\\n        )\\n    {\\n        Proposal storage proposal = proposals[_proposalId];\\n        return (\\n            proposal.proposer,\\n            proposal.amount,\\n            proposal.description,\\n            proposal.yesVotes,\\n            proposal.noVotes,\\n            proposal.executed\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xdecff69382cae88fd75d9afeb019e0dbe65c1f1962c45e827f256426ed931653\",\"license\":\"MIT\"},\"contracts/HumanOrganization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract HumanOrganization is Ownable {\\n    string public name;\\n    string public expertise;\\n    string[] public resources;\\n    bool public isAvailable;\\n\\n    event TaskAssigned(string task);\\n    event ResourceAdded(string resource);\\n\\n    constructor(string memory _name, string memory _expertise) {\\n        name = _name;\\n        expertise = _expertise;\\n        isAvailable = true;\\n    }\\n\\n    function assignTask(string memory _task) external onlyOwner {\\n        require(isAvailable, \\\"Organization is not available\\\");\\n        emit TaskAssigned(_task);\\n    }\\n\\n    function addResource(string memory _resource) external onlyOwner {\\n        resources.push(_resource);\\n        emit ResourceAdded(_resource);\\n    }\\n\\n    function setAvailability(bool _isAvailable) external onlyOwner {\\n        isAvailable = _isAvailable;\\n    }\\n\\n    function getResources() external view returns (string[] memory) {\\n        return resources;\\n    }\\n}\\n\",\"keccak256\":\"0x0e39e59ed7b987f58bccc818c13e57f6a5cf7c2e0f8afc050981238128779084\",\"license\":\"MIT\"},\"contracts/Individual.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Individual is Ownable {\\n    string public name;\\n    string public skills;\\n    bool public isAvailable;\\n\\n    event TaskAssigned(string task);\\n\\n    constructor(string memory _name, string memory _skills) {\\n        name = _name;\\n        skills = _skills;\\n        isAvailable = true;\\n    }\\n\\n    function assignTask(string memory _task) external onlyOwner {\\n        require(isAvailable, \\\"Individual is not available\\\");\\n        emit TaskAssigned(_task);\\n    }\\n\\n    function setAvailability(bool _isAvailable) external onlyOwner {\\n        isAvailable = _isAvailable;\\n    }\\n}\\n\",\"keccak256\":\"0x7be5f575b865e3a8c1b18a6d042bad2330c8c3200c216bfe0c80610c6824c081\",\"license\":\"MIT\"},\"contracts/agents/GlobalAgent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract GlobalAgent is Ownable {\\n    function monitorGlobalNews() external pure returns (string memory) {\\n        return \\\"Monitoring global news sources\\\";\\n    }\\n\\n    function reportGlobalDisaster(\\n        string memory _disasterInfo\\n    ) external pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\\"Reporting global disaster: \\\", _disasterInfo)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x8340becf05599f7f0de6ab029453d3b04dc68e23c4aba934dc0d501f93951231\",\"license\":\"MIT\"},\"contracts/agents/LocalAgent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract LocalAgent is Ownable {\\n    function monitorLocalSensors() external pure returns (string memory) {\\n        return \\\"Monitoring local sensors\\\";\\n    }\\n\\n    function reportLocalDisaster(\\n        string memory _disasterInfo\\n    ) external pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\\"Reporting local disaster: \\\", _disasterInfo)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x6702911dd2e3b564782eb8e79f1110855e560e0db5e7f3cdb35583600d069de3\",\"license\":\"MIT\"},\"contracts/agents/RegionalAgent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract RegionalAgent is Ownable {\\n    function monitorRegionalCommunications()\\n        external\\n        pure\\n        returns (string memory)\\n    {\\n        return \\\"Monitoring regional communications\\\";\\n    }\\n\\n    function reportRegionalDisaster(\\n        string memory _disasterInfo\\n    ) external pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\\"Reporting regional disaster: \\\", _disasterInfo)\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x7acd183f6a7c1891a27b6f0ee2e97879488ab2e8d7dfed762173895d474524a4\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162004c4d38038062004c4d8339818101604052810190620000379190620003ab565b620000576200004b620001d760201b60201c565b620001df60201b60201c565b856001819055508460028190555083600381905550600460405180604001604052808573ffffffffffffffffffffffffffffffffffffffff168152602001846002811115620000ab57620000aa62000447565b5b8152509080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548160ff0219169083600281111562000148576200014762000447565b5b0217905550505080600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f9f4c195fb507ad6d3407735a60c78b30a7bdfa431d42a2cf0329a3aa597efd548383604051620001c3929190620004d8565b60405180910390a150505050505062000505565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b6000819050919050565b620002bd81620002a8565b8114620002c957600080fd5b50565b600081519050620002dd81620002b2565b92915050565b6000819050919050565b620002f881620002e3565b81146200030457600080fd5b50565b6000815190506200031881620002ed565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200034b826200031e565b9050919050565b6200035d816200033e565b81146200036957600080fd5b50565b6000815190506200037d8162000352565b92915050565b600381106200039157600080fd5b50565b600081519050620003a58162000383565b92915050565b60008060008060008060c08789031215620003cb57620003ca620002a3565b5b6000620003db89828a01620002cc565b9650506020620003ee89828a01620002cc565b95505060406200040189828a0162000307565b94505060606200041489828a016200036c565b93505060806200042789828a0162000394565b92505060a06200043a89828a016200036c565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b62000481816200033e565b82525050565b600381106200049b576200049a62000447565b5b50565b6000819050620004ae8262000487565b919050565b6000620004c0826200049e565b9050919050565b620004d281620004b3565b82525050565b6000604082019050620004ef600083018562000476565b620004fe6020830184620004c7565b9392505050565b61473880620005156000396000f3fe60806040523480156200001157600080fd5b5060043610620001485760003560e01c80637d70cbaf11620000bd578063dacae087116200007b578063dacae0871462000352578063e792dd8a1462000372578063eac3fda414620003a8578063ecd9288f14620003ca578063f2fde38b14620003ec5762000148565b80637d70cbaf14620002ac57806384fa2c8814620002ce5780638da5cb5b14620002ee578063a9ed36421462000310578063b80777ea14620003305762000148565b80634fd7d76a116200010b5780634fd7d76a14620001ef578063513856c81462000211578063589af69c146200024857806366542aa7146200026a578063715018a614620002a05762000148565b806309ce4b9c146200014d5780631cf411d6146200016d578063370f04be146200018d578063388ad66e14620001ad5780634162169f14620001cd575b600080fd5b6200016b600480360381019062000165919062001200565b6200040c565b005b6200018b600480360381019062000185919062001282565b62000538565b005b620001ab6004803603810190620001a5919062001416565b6200087e565b005b620001cb6004803603810190620001c5919062001416565b6200091f565b005b620001d762000a27565b604051620001e69190620014e7565b60405180910390f35b620001f962000a4d565b6040516200020891906200151f565b60405180910390f35b6200022f600480360381019062000229919062001282565b62000a53565b6040516200023f929190620015cd565b60405180910390f35b6200025262000ab1565b6040516200026191906200151f565b60405180910390f35b62000288600480360381019062000282919062001282565b62000ab7565b6040516200029791906200161f565b60405180910390f35b620002aa62000af7565b005b620002b662000b0f565b604051620002c591906200164d565b60405180910390f35b620002ec6004803603810190620002e6919062001416565b62000b1c565b005b620002f862000c24565b6040516200030791906200166a565b60405180910390f35b6200032e600480360381019062000328919062001687565b62000c4d565b005b6200033a62000d37565b6040516200034991906200164d565b60405180910390f35b6200037060048036038101906200036a919062001687565b62000d3d565b005b6200039060048036038101906200038a919062001282565b62000e27565b6040516200039f919062001731565b60405180910390f35b620003b262000e67565b604051620003c1919062001860565b60405180910390f35b620003d462000f5b565b604051620003e391906200164d565b60405180910390f35b6200040a600480360381019062000404919062001884565b62000f68565b005b6200041662000ff2565b600460405180604001604052808473ffffffffffffffffffffffffffffffffffffffff1681526020018360028111156200045557620004546200154d565b5b8152509080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548160ff02191690836002811115620004f257620004f16200154d565b5b021790555050507f9f4c195fb507ad6d3407735a60c78b30a7bdfa431d42a2cf0329a3aa597efd5482826040516200052c929190620015cd565b60405180910390a15050565b6200054262000ff2565b60048054905081106200058c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620005839062001917565b60405180910390fd5b600060048281548110620005a557620005a462001939565b5b906000526020600020016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900460ff1660028111156200063857620006376200154d565b5b60028111156200064d576200064c6200154d565b5b815250509050600060028111156200066a57620006696200154d565b5b816020015160028111156200068457620006836200154d565b5b036200070c57806000015173ffffffffffffffffffffffffffffffffffffffff16635ee891386040518163ffffffff1660e01b8152600401600060405180830381865afa158015620006da573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019062000705919062001a12565b506200087a565b600160028111156200072357620007226200154d565b5b816020015160028111156200073d576200073c6200154d565b5b03620007c557806000015173ffffffffffffffffffffffffffffffffffffffff166360cd14596040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000793573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190620007be919062001a12565b5062000879565b600280811115620007db57620007da6200154d565b5b81602001516002811115620007f557620007f46200154d565b5b036200087857806000015173ffffffffffffffffffffffffffffffffffffffff16634b2588ad6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156200084b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019062000876919062001a12565b505b5b5b5050565b6200088862000ff2565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302d52fa483836040518363ffffffff1660e01b8152600401620008e792919062001aaf565b600060405180830381600087803b1580156200090257600080fd5b505af115801562000917573d6000803e3d6000fd5b505050505050565b6200092962000ff2565b600680549050821062000973576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200096a9062001b33565b60405180910390fd5b600682815481106200098a576200098962001939565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cb8d902c826040518263ffffffff1660e01b8152600401620009ef919062001b55565b600060405180830381600087803b15801562000a0a57600080fd5b505af115801562000a1f573d6000803e3d6000fd5b505050505050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60015481565b6004818154811062000a6457600080fd5b906000526020600020016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160149054906101000a900460ff16905082565b60025481565b6006818154811062000ac857600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b62000b0162000ff2565b62000b0d600062001077565b565b6000600580549050905090565b62000b2662000ff2565b600580549050821062000b70576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000b679062001bc9565b60405180910390fd5b6005828154811062000b875762000b8662001939565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cb8d902c826040518263ffffffff1660e01b815260040162000bec919062001b55565b600060405180830381600087803b15801562000c0757600080fd5b505af115801562000c1c573d6000803e3d6000fd5b505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b62000c5762000ff2565b6000828260405162000c699062001143565b62000c7692919062001beb565b604051809103906000f08015801562000c93573d6000803e3d6000fd5b5090506005819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507ff84dfefd1424c476705a9a5ce3238cf6b203e946990646666c5bec8bc8043b2a8160405162000d2a91906200166a565b60405180910390a1505050565b60035481565b62000d4762000ff2565b6000828260405162000d599062001151565b62000d6692919062001beb565b604051809103906000f08015801562000d83573d6000803e3d6000fd5b5090506006819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f33ca4a4020fd40caf1c02f519a79a7f9cd778b82b412aa204650315c5385c3908160405162000e1a91906200166a565b60405180910390a1505050565b6005818154811062000e3857600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606004805480602002602001604051908101604052809291908181526020016000905b8282101562000f52578382906000526020600020016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900460ff16600281111562000f295762000f286200154d565b5b600281111562000f3e5762000f3d6200154d565b5b815250508152602001906001019062000e8b565b50505050905090565b6000600680549050905090565b62000f7262000ff2565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160362000fe4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000fdb9062001c9c565b60405180910390fd5b62000fef8162001077565b50565b62000ffc6200113b565b73ffffffffffffffffffffffffffffffffffffffff166200101c62000c24565b73ffffffffffffffffffffffffffffffffffffffff161462001075576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200106c9062001d0e565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6118348062001d3183390190565b61119e806200356583390190565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620011a08262001173565b9050919050565b620011b28162001193565b8114620011be57600080fd5b50565b600081359050620011d281620011a7565b92915050565b60038110620011e657600080fd5b50565b600081359050620011fa81620011d8565b92915050565b600080604083850312156200121a576200121962001169565b5b60006200122a85828601620011c1565b92505060206200123d85828601620011e9565b9150509250929050565b6000819050919050565b6200125c8162001247565b81146200126857600080fd5b50565b6000813590506200127c8162001251565b92915050565b6000602082840312156200129b576200129a62001169565b5b6000620012ab848285016200126b565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200130982620012be565b810181811067ffffffffffffffff821117156200132b576200132a620012cf565b5b80604052505050565b6000620013406200115f565b90506200134e8282620012fe565b919050565b600067ffffffffffffffff821115620013715762001370620012cf565b5b6200137c82620012be565b9050602081019050919050565b82818337600083830152505050565b6000620013af620013a98462001353565b62001334565b905082815260208101848484011115620013ce57620013cd620012b9565b5b620013db84828562001389565b509392505050565b600082601f830112620013fb57620013fa620012b4565b5b81356200140d84826020860162001398565b91505092915050565b6000806040838503121562001430576200142f62001169565b5b600062001440858286016200126b565b925050602083013567ffffffffffffffff8111156200146457620014636200116e565b5b6200147285828601620013e3565b9150509250929050565b6000819050919050565b6000620014a7620014a16200149b8462001173565b6200147c565b62001173565b9050919050565b6000620014bb8262001486565b9050919050565b6000620014cf82620014ae565b9050919050565b620014e181620014c2565b82525050565b6000602082019050620014fe6000830184620014d6565b92915050565b6000819050919050565b620015198162001504565b82525050565b60006020820190506200153660008301846200150e565b92915050565b620015478162001193565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811062001590576200158f6200154d565b5b50565b6000819050620015a3826200157c565b919050565b6000620015b58262001593565b9050919050565b620015c781620015a8565b82525050565b6000604082019050620015e460008301856200153c565b620015f36020830184620015bc565b9392505050565b60006200160782620014ae565b9050919050565b6200161981620015fa565b82525050565b60006020820190506200163660008301846200160e565b92915050565b620016478162001247565b82525050565b60006020820190506200166460008301846200163c565b92915050565b60006020820190506200168160008301846200153c565b92915050565b60008060408385031215620016a157620016a062001169565b5b600083013567ffffffffffffffff811115620016c257620016c16200116e565b5b620016d085828601620013e3565b925050602083013567ffffffffffffffff811115620016f457620016f36200116e565b5b6200170285828601620013e3565b9150509250929050565b60006200171982620014ae565b9050919050565b6200172b816200170c565b82525050565b600060208201905062001748600083018462001720565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b620017858162001193565b82525050565b6200179681620015a8565b82525050565b604082016000820151620017b460008501826200177a565b506020820151620017c960208501826200178b565b50505050565b6000620017dd83836200179c565b60408301905092915050565b6000602082019050919050565b600062001803826200174e565b6200180f818562001759565b93506200181c836200176a565b8060005b8381101562001853578151620018378882620017cf565b97506200184483620017e9565b92505060018101905062001820565b5085935050505092915050565b600060208201905081810360008301526200187c8184620017f6565b905092915050565b6000602082840312156200189d576200189c62001169565b5b6000620018ad84828501620011c1565b91505092915050565b600082825260208201905092915050565b7f496e76616c6964206167656e7420696e64657800000000000000000000000000600082015250565b6000620018ff601383620018b6565b91506200190c82620018c7565b602082019050919050565b600060208201905081810360008301526200193281620018f0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60005b83811015620019885780820151818401526020810190506200196b565b60008484015250505050565b6000620019ab620019a58462001353565b62001334565b905082815260208101848484011115620019ca57620019c9620012b9565b5b620019d784828562001968565b509392505050565b600082601f830112620019f757620019f6620012b4565b5b815162001a0984826020860162001994565b91505092915050565b60006020828403121562001a2b5762001a2a62001169565b5b600082015167ffffffffffffffff81111562001a4c5762001a4b6200116e565b5b62001a5a84828501620019df565b91505092915050565b600081519050919050565b600062001a7b8262001a63565b62001a878185620018b6565b935062001a9981856020860162001968565b62001aa481620012be565b840191505092915050565b600060408201905062001ac660008301856200163c565b818103602083015262001ada818462001a6e565b90509392505050565b7f496e76616c696420696e646976696475616c20696e6465780000000000000000600082015250565b600062001b1b601883620018b6565b915062001b288262001ae3565b602082019050919050565b6000602082019050818103600083015262001b4e8162001b0c565b9050919050565b6000602082019050818103600083015262001b71818462001a6e565b905092915050565b7f496e76616c6964206f7267616e697a6174696f6e20696e646578000000000000600082015250565b600062001bb1601a83620018b6565b915062001bbe8262001b79565b602082019050919050565b6000602082019050818103600083015262001be48162001ba2565b9050919050565b6000604082019050818103600083015262001c07818562001a6e565b9050818103602083015262001c1d818462001a6e565b90509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600062001c84602683620018b6565b915062001c918262001c26565b604082019050919050565b6000602082019050818103600083015262001cb78162001c75565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600062001cf6602083620018b6565b915062001d038262001cbe565b602082019050919050565b6000602082019050818103600083015262001d298162001ce7565b905091905056fe60806040523480156200001157600080fd5b5060405162001834380380620018348339818101604052810190620000379190620002fd565b620000576200004b6200009e60201b60201c565b620000a660201b60201c565b8160019081620000689190620005cd565b5080600290816200007a9190620005cd565b506001600460006101000a81548160ff0219169083151502179055505050620006b4565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001d38262000188565b810181811067ffffffffffffffff82111715620001f557620001f462000199565b5b80604052505050565b60006200020a6200016a565b9050620002188282620001c8565b919050565b600067ffffffffffffffff8211156200023b576200023a62000199565b5b620002468262000188565b9050602081019050919050565b60005b838110156200027357808201518184015260208101905062000256565b60008484015250505050565b60006200029662000290846200021d565b620001fe565b905082815260208101848484011115620002b557620002b462000183565b5b620002c284828562000253565b509392505050565b600082601f830112620002e257620002e16200017e565b5b8151620002f48482602086016200027f565b91505092915050565b6000806040838503121562000317576200031662000174565b5b600083015167ffffffffffffffff81111562000338576200033762000179565b5b6200034685828601620002ca565b925050602083015167ffffffffffffffff8111156200036a576200036962000179565b5b6200037885828601620002ca565b9150509250929050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620003d557607f821691505b602082108103620003eb57620003ea6200038d565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620004557fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000416565b62000461868362000416565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620004ae620004a8620004a28462000479565b62000483565b62000479565b9050919050565b6000819050919050565b620004ca836200048d565b620004e2620004d982620004b5565b84845462000423565b825550505050565b600090565b620004f9620004ea565b62000506818484620004bf565b505050565b5b818110156200052e5762000522600082620004ef565b6001810190506200050c565b5050565b601f8211156200057d576200054781620003f1565b620005528462000406565b8101602085101562000562578190505b6200057a620005718562000406565b8301826200050b565b50505b505050565b600082821c905092915050565b6000620005a26000198460080262000582565b1980831691505092915050565b6000620005bd83836200058f565b9150826002028217905092915050565b620005d88262000382565b67ffffffffffffffff811115620005f457620005f362000199565b5b620006008254620003bc565b6200060d82828562000532565b600060209050601f83116001811462000645576000841562000630578287015190505b6200063c8582620005af565b865550620006ac565b601f1984166200065586620003f1565b60005b828110156200067f5784890151825560018201915060208501945060208101905062000658565b868310156200069f57848901516200069b601f8916826200058f565b8355505b6001600288020188555050505b505050505050565b61117080620006c46000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80638a15309b116100715780638a15309b146101405780638c23a3531461015c5780638da5cb5b1461017a578063c1cc57b014610198578063cb8d902c146101b6578063f2fde38b146101d2576100a9565b806306fdde03146100ae578063244d6daa146100cc57806326a18375146100fc578063715018a614610118578063856c71dd14610122575b600080fd5b6100b66101ee565b6040516100c39190610869565b60405180910390f35b6100e660048036038101906100e191906108d5565b61027c565b6040516100f39190610869565b60405180910390f35b6101166004803603810190610111919061093a565b610328565b005b61012061034d565b005b61012a610361565b6040516101379190610976565b60405180910390f35b61015a60048036038101906101559190610ac6565b610374565b005b6101646103eb565b6040516101719190610869565b60405180910390f35b610182610479565b60405161018f9190610b50565b60405180910390f35b6101a06104a2565b6040516101ad9190610c77565b60405180910390f35b6101d060048036038101906101cb9190610ac6565b61057b565b005b6101ec60048036038101906101e79190610cc5565b61060c565b005b600180546101fb90610d21565b80601f016020809104026020016040519081016040528092919081815260200182805461022790610d21565b80156102745780601f1061024957610100808354040283529160200191610274565b820191906000526020600020905b81548152906001019060200180831161025757829003601f168201915b505050505081565b6003818154811061028c57600080fd5b9060005260206000200160009150905080546102a790610d21565b80601f01602080910402602001604051908101604052809291908181526020018280546102d390610d21565b80156103205780601f106102f557610100808354040283529160200191610320565b820191906000526020600020905b81548152906001019060200180831161030357829003601f168201915b505050505081565b61033061068f565b80600460006101000a81548160ff02191690831515021790555050565b61035561068f565b61035f600061070d565b565b600460009054906101000a900460ff1681565b61037c61068f565b6003819080600181540180825580915050600190039060005260206000200160009091909190915090816103b09190610efe565b507f59059f4c91eb9cb9081478c3ed8944836dc5cdb0abb68ed29f4166a1ce441966816040516103e09190610869565b60405180910390a150565b600280546103f890610d21565b80601f016020809104026020016040519081016040528092919081815260200182805461042490610d21565b80156104715780601f1061044657610100808354040283529160200191610471565b820191906000526020600020905b81548152906001019060200180831161045457829003601f168201915b505050505081565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606003805480602002602001604051908101604052809291908181526020016000905b828210156105725783829060005260206000200180546104e590610d21565b80601f016020809104026020016040519081016040528092919081815260200182805461051190610d21565b801561055e5780601f106105335761010080835404028352916020019161055e565b820191906000526020600020905b81548152906001019060200180831161054157829003601f168201915b5050505050815260200190600101906104c6565b50505050905090565b61058361068f565b600460009054906101000a900460ff166105d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c99061101c565b60405180910390fd5b7fe661f69b340c857b7ae656ac737b7ee977a4e9e8e5bd4bcde5df4e17e17a3e4d816040516106019190610869565b60405180910390a150565b61061461068f565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610683576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067a906110ae565b60405180910390fd5b61068c8161070d565b50565b6106976107d1565b73ffffffffffffffffffffffffffffffffffffffff166106b5610479565b73ffffffffffffffffffffffffffffffffffffffff161461070b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107029061111a565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600081519050919050565b600082825260208201905092915050565b60005b838110156108135780820151818401526020810190506107f8565b60008484015250505050565b6000601f19601f8301169050919050565b600061083b826107d9565b61084581856107e4565b93506108558185602086016107f5565b61085e8161081f565b840191505092915050565b600060208201905081810360008301526108838184610830565b905092915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6108b28161089f565b81146108bd57600080fd5b50565b6000813590506108cf816108a9565b92915050565b6000602082840312156108eb576108ea610895565b5b60006108f9848285016108c0565b91505092915050565b60008115159050919050565b61091781610902565b811461092257600080fd5b50565b6000813590506109348161090e565b92915050565b6000602082840312156109505761094f610895565b5b600061095e84828501610925565b91505092915050565b61097081610902565b82525050565b600060208201905061098b6000830184610967565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6109d38261081f565b810181811067ffffffffffffffff821117156109f2576109f161099b565b5b80604052505050565b6000610a0561088b565b9050610a1182826109ca565b919050565b600067ffffffffffffffff821115610a3157610a3061099b565b5b610a3a8261081f565b9050602081019050919050565b82818337600083830152505050565b6000610a69610a6484610a16565b6109fb565b905082815260208101848484011115610a8557610a84610996565b5b610a90848285610a47565b509392505050565b600082601f830112610aad57610aac610991565b5b8135610abd848260208601610a56565b91505092915050565b600060208284031215610adc57610adb610895565b5b600082013567ffffffffffffffff811115610afa57610af961089a565b5b610b0684828501610a98565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b3a82610b0f565b9050919050565b610b4a81610b2f565b82525050565b6000602082019050610b656000830184610b41565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b6000610bb3826107d9565b610bbd8185610b97565b9350610bcd8185602086016107f5565b610bd68161081f565b840191505092915050565b6000610bed8383610ba8565b905092915050565b6000602082019050919050565b6000610c0d82610b6b565b610c178185610b76565b935083602082028501610c2985610b87565b8060005b85811015610c655784840389528151610c468582610be1565b9450610c5183610bf5565b925060208a01995050600181019050610c2d565b50829750879550505050505092915050565b60006020820190508181036000830152610c918184610c02565b905092915050565b610ca281610b2f565b8114610cad57600080fd5b50565b600081359050610cbf81610c99565b92915050565b600060208284031215610cdb57610cda610895565b5b6000610ce984828501610cb0565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610d3957607f821691505b602082108103610d4c57610d4b610cf2565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610db47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610d77565b610dbe8683610d77565b95508019841693508086168417925050509392505050565b6000819050919050565b6000610dfb610df6610df18461089f565b610dd6565b61089f565b9050919050565b6000819050919050565b610e1583610de0565b610e29610e2182610e02565b848454610d84565b825550505050565b600090565b610e3e610e31565b610e49818484610e0c565b505050565b5b81811015610e6d57610e62600082610e36565b600181019050610e4f565b5050565b601f821115610eb257610e8381610d52565b610e8c84610d67565b81016020851015610e9b578190505b610eaf610ea785610d67565b830182610e4e565b50505b505050565b600082821c905092915050565b6000610ed560001984600802610eb7565b1980831691505092915050565b6000610eee8383610ec4565b9150826002028217905092915050565b610f07826107d9565b67ffffffffffffffff811115610f2057610f1f61099b565b5b610f2a8254610d21565b610f35828285610e71565b600060209050601f831160018114610f685760008415610f56578287015190505b610f608582610ee2565b865550610fc8565b601f198416610f7686610d52565b60005b82811015610f9e57848901518255600182019150602085019450602081019050610f79565b86831015610fbb5784890151610fb7601f891682610ec4565b8355505b6001600288020188555050505b505050505050565b7f4f7267616e697a6174696f6e206973206e6f7420617661696c61626c65000000600082015250565b6000611006601d836107e4565b915061101182610fd0565b602082019050919050565b6000602082019050818103600083015261103581610ff9565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006110986026836107e4565b91506110a38261103c565b604082019050919050565b600060208201905081810360008301526110c78161108b565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006111046020836107e4565b915061110f826110ce565b602082019050919050565b60006020820190508181036000830152611133816110f7565b905091905056fea2646970667358221220250f734efaff088dc4deb7dab7be2a85c71816a8b3feeec32db65e00405c9f1564736f6c6343000811003360806040523480156200001157600080fd5b506040516200119e3803806200119e8339818101604052810190620000379190620002fd565b620000576200004b6200009e60201b60201c565b620000a660201b60201c565b8160019081620000689190620005cd565b5080600290816200007a9190620005cd565b506001600360006101000a81548160ff0219169083151502179055505050620006b4565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001d38262000188565b810181811067ffffffffffffffff82111715620001f557620001f462000199565b5b80604052505050565b60006200020a6200016a565b9050620002188282620001c8565b919050565b600067ffffffffffffffff8211156200023b576200023a62000199565b5b620002468262000188565b9050602081019050919050565b60005b838110156200027357808201518184015260208101905062000256565b60008484015250505050565b60006200029662000290846200021d565b620001fe565b905082815260208101848484011115620002b557620002b462000183565b5b620002c284828562000253565b509392505050565b600082601f830112620002e257620002e16200017e565b5b8151620002f48482602086016200027f565b91505092915050565b6000806040838503121562000317576200031662000174565b5b600083015167ffffffffffffffff81111562000338576200033762000179565b5b6200034685828601620002ca565b925050602083015167ffffffffffffffff8111156200036a576200036962000179565b5b6200037885828601620002ca565b9150509250929050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620003d557607f821691505b602082108103620003eb57620003ea6200038d565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620004557fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000416565b62000461868362000416565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620004ae620004a8620004a28462000479565b62000483565b62000479565b9050919050565b6000819050919050565b620004ca836200048d565b620004e2620004d982620004b5565b84845462000423565b825550505050565b600090565b620004f9620004ea565b62000506818484620004bf565b505050565b5b818110156200052e5762000522600082620004ef565b6001810190506200050c565b5050565b601f8211156200057d576200054781620003f1565b620005528462000406565b8101602085101562000562578190505b6200057a620005718562000406565b8301826200050b565b50505b505050565b600082821c905092915050565b6000620005a26000198460080262000582565b1980831691505092915050565b6000620005bd83836200058f565b9150826002028217905092915050565b620005d88262000382565b67ffffffffffffffff811115620005f457620005f362000199565b5b620006008254620003bc565b6200060d82828562000532565b600060209050601f83116001811462000645576000841562000630578287015190505b6200063c8582620005af565b865550620006ac565b601f1984166200065586620003f1565b60005b828110156200067f5784890151825560018201915060208501945060208101905062000658565b868310156200069f57848901516200069b601f8916826200058f565b8355505b6001600288020188555050505b505050505050565b610ada80620006c46000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063856c71dd1161005b578063856c71dd146100ef5780638da5cb5b1461010d578063cb8d902c1461012b578063f2fde38b1461014757610088565b806306fdde031461008d57806326a18375146100ab5780633b7fdb73146100c7578063715018a6146100e5575b600080fd5b610095610163565b6040516100a291906105e2565b60405180910390f35b6100c560048036038101906100c09190610650565b6101f1565b005b6100cf610216565b6040516100dc91906105e2565b60405180910390f35b6100ed6102a4565b005b6100f76102b8565b604051610104919061068c565b60405180910390f35b6101156102cb565b60405161012291906106e8565b60405180910390f35b61014560048036038101906101409190610838565b6102f4565b005b610161600480360381019061015c91906108ad565b610385565b005b6001805461017090610909565b80601f016020809104026020016040519081016040528092919081815260200182805461019c90610909565b80156101e95780601f106101be576101008083540402835291602001916101e9565b820191906000526020600020905b8154815290600101906020018083116101cc57829003601f168201915b505050505081565b6101f9610408565b80600360006101000a81548160ff02191690831515021790555050565b6002805461022390610909565b80601f016020809104026020016040519081016040528092919081815260200182805461024f90610909565b801561029c5780601f106102715761010080835404028352916020019161029c565b820191906000526020600020905b81548152906001019060200180831161027f57829003601f168201915b505050505081565b6102ac610408565b6102b66000610486565b565b600360009054906101000a900460ff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6102fc610408565b600360009054906101000a900460ff1661034b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034290610986565b60405180910390fd5b7fe661f69b340c857b7ae656ac737b7ee977a4e9e8e5bd4bcde5df4e17e17a3e4d8160405161037a91906105e2565b60405180910390a150565b61038d610408565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036103fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103f390610a18565b60405180910390fd5b61040581610486565b50565b61041061054a565b73ffffffffffffffffffffffffffffffffffffffff1661042e6102cb565b73ffffffffffffffffffffffffffffffffffffffff1614610484576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047b90610a84565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600081519050919050565b600082825260208201905092915050565b60005b8381101561058c578082015181840152602081019050610571565b60008484015250505050565b6000601f19601f8301169050919050565b60006105b482610552565b6105be818561055d565b93506105ce81856020860161056e565b6105d781610598565b840191505092915050565b600060208201905081810360008301526105fc81846105a9565b905092915050565b6000604051905090565b600080fd5b600080fd5b60008115159050919050565b61062d81610618565b811461063857600080fd5b50565b60008135905061064a81610624565b92915050565b6000602082840312156106665761066561060e565b5b60006106748482850161063b565b91505092915050565b61068681610618565b82525050565b60006020820190506106a1600083018461067d565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106d2826106a7565b9050919050565b6106e2816106c7565b82525050565b60006020820190506106fd60008301846106d9565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61074582610598565b810181811067ffffffffffffffff821117156107645761076361070d565b5b80604052505050565b6000610777610604565b9050610783828261073c565b919050565b600067ffffffffffffffff8211156107a3576107a261070d565b5b6107ac82610598565b9050602081019050919050565b82818337600083830152505050565b60006107db6107d684610788565b61076d565b9050828152602081018484840111156107f7576107f6610708565b5b6108028482856107b9565b509392505050565b600082601f83011261081f5761081e610703565b5b813561082f8482602086016107c8565b91505092915050565b60006020828403121561084e5761084d61060e565b5b600082013567ffffffffffffffff81111561086c5761086b610613565b5b6108788482850161080a565b91505092915050565b61088a816106c7565b811461089557600080fd5b50565b6000813590506108a781610881565b92915050565b6000602082840312156108c3576108c261060e565b5b60006108d184828501610898565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061092157607f821691505b602082108103610934576109336108da565b5b50919050565b7f496e646976696475616c206973206e6f7420617661696c61626c650000000000600082015250565b6000610970601b8361055d565b915061097b8261093a565b602082019050919050565b6000602082019050818103600083015261099f81610963565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610a0260268361055d565b9150610a0d826109a6565b604082019050919050565b60006020820190508181036000830152610a31816109f5565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610a6e60208361055d565b9150610a7982610a38565b602082019050919050565b60006020820190508181036000830152610a9d81610a61565b905091905056fea26469706673582212203d755d9c2f19de89e59610f0537f87096d5955c50a8230bb172ff10d1400afef64736f6c63430008110033a2646970667358221220c97277b50f9fd41976142e6db1fd14647aa3baa0171bdbf10fd27e819374a8a464736f6c63430008110033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620001485760003560e01c80637d70cbaf11620000bd578063dacae087116200007b578063dacae0871462000352578063e792dd8a1462000372578063eac3fda414620003a8578063ecd9288f14620003ca578063f2fde38b14620003ec5762000148565b80637d70cbaf14620002ac57806384fa2c8814620002ce5780638da5cb5b14620002ee578063a9ed36421462000310578063b80777ea14620003305762000148565b80634fd7d76a116200010b5780634fd7d76a14620001ef578063513856c81462000211578063589af69c146200024857806366542aa7146200026a578063715018a614620002a05762000148565b806309ce4b9c146200014d5780631cf411d6146200016d578063370f04be146200018d578063388ad66e14620001ad5780634162169f14620001cd575b600080fd5b6200016b600480360381019062000165919062001200565b6200040c565b005b6200018b600480360381019062000185919062001282565b62000538565b005b620001ab6004803603810190620001a5919062001416565b6200087e565b005b620001cb6004803603810190620001c5919062001416565b6200091f565b005b620001d762000a27565b604051620001e69190620014e7565b60405180910390f35b620001f962000a4d565b6040516200020891906200151f565b60405180910390f35b6200022f600480360381019062000229919062001282565b62000a53565b6040516200023f929190620015cd565b60405180910390f35b6200025262000ab1565b6040516200026191906200151f565b60405180910390f35b62000288600480360381019062000282919062001282565b62000ab7565b6040516200029791906200161f565b60405180910390f35b620002aa62000af7565b005b620002b662000b0f565b604051620002c591906200164d565b60405180910390f35b620002ec6004803603810190620002e6919062001416565b62000b1c565b005b620002f862000c24565b6040516200030791906200166a565b60405180910390f35b6200032e600480360381019062000328919062001687565b62000c4d565b005b6200033a62000d37565b6040516200034991906200164d565b60405180910390f35b6200037060048036038101906200036a919062001687565b62000d3d565b005b6200039060048036038101906200038a919062001282565b62000e27565b6040516200039f919062001731565b60405180910390f35b620003b262000e67565b604051620003c1919062001860565b60405180910390f35b620003d462000f5b565b604051620003e391906200164d565b60405180910390f35b6200040a600480360381019062000404919062001884565b62000f68565b005b6200041662000ff2565b600460405180604001604052808473ffffffffffffffffffffffffffffffffffffffff1681526020018360028111156200045557620004546200154d565b5b8152509080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548160ff02191690836002811115620004f257620004f16200154d565b5b021790555050507f9f4c195fb507ad6d3407735a60c78b30a7bdfa431d42a2cf0329a3aa597efd5482826040516200052c929190620015cd565b60405180910390a15050565b6200054262000ff2565b60048054905081106200058c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620005839062001917565b60405180910390fd5b600060048281548110620005a557620005a462001939565b5b906000526020600020016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900460ff1660028111156200063857620006376200154d565b5b60028111156200064d576200064c6200154d565b5b815250509050600060028111156200066a57620006696200154d565b5b816020015160028111156200068457620006836200154d565b5b036200070c57806000015173ffffffffffffffffffffffffffffffffffffffff16635ee891386040518163ffffffff1660e01b8152600401600060405180830381865afa158015620006da573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019062000705919062001a12565b506200087a565b600160028111156200072357620007226200154d565b5b816020015160028111156200073d576200073c6200154d565b5b03620007c557806000015173ffffffffffffffffffffffffffffffffffffffff166360cd14596040518163ffffffff1660e01b8152600401600060405180830381865afa15801562000793573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190620007be919062001a12565b5062000879565b600280811115620007db57620007da6200154d565b5b81602001516002811115620007f557620007f46200154d565b5b036200087857806000015173ffffffffffffffffffffffffffffffffffffffff16634b2588ad6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156200084b573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f8201168201806040525081019062000876919062001a12565b505b5b5b5050565b6200088862000ff2565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166302d52fa483836040518363ffffffff1660e01b8152600401620008e792919062001aaf565b600060405180830381600087803b1580156200090257600080fd5b505af115801562000917573d6000803e3d6000fd5b505050505050565b6200092962000ff2565b600680549050821062000973576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200096a9062001b33565b60405180910390fd5b600682815481106200098a576200098962001939565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cb8d902c826040518263ffffffff1660e01b8152600401620009ef919062001b55565b600060405180830381600087803b15801562000a0a57600080fd5b505af115801562000a1f573d6000803e3d6000fd5b505050505050565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60015481565b6004818154811062000a6457600080fd5b906000526020600020016000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060000160149054906101000a900460ff16905082565b60025481565b6006818154811062000ac857600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b62000b0162000ff2565b62000b0d600062001077565b565b6000600580549050905090565b62000b2662000ff2565b600580549050821062000b70576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000b679062001bc9565b60405180910390fd5b6005828154811062000b875762000b8662001939565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663cb8d902c826040518263ffffffff1660e01b815260040162000bec919062001b55565b600060405180830381600087803b15801562000c0757600080fd5b505af115801562000c1c573d6000803e3d6000fd5b505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b62000c5762000ff2565b6000828260405162000c699062001143565b62000c7692919062001beb565b604051809103906000f08015801562000c93573d6000803e3d6000fd5b5090506005819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507ff84dfefd1424c476705a9a5ce3238cf6b203e946990646666c5bec8bc8043b2a8160405162000d2a91906200166a565b60405180910390a1505050565b60035481565b62000d4762000ff2565b6000828260405162000d599062001151565b62000d6692919062001beb565b604051809103906000f08015801562000d83573d6000803e3d6000fd5b5090506006819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f33ca4a4020fd40caf1c02f519a79a7f9cd778b82b412aa204650315c5385c3908160405162000e1a91906200166a565b60405180910390a1505050565b6005818154811062000e3857600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606004805480602002602001604051908101604052809291908181526020016000905b8282101562000f52578382906000526020600020016040518060400160405290816000820160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020016000820160149054906101000a900460ff16600281111562000f295762000f286200154d565b5b600281111562000f3e5762000f3d6200154d565b5b815250508152602001906001019062000e8b565b50505050905090565b6000600680549050905090565b62000f7262000ff2565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160362000fe4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000fdb9062001c9c565b60405180910390fd5b62000fef8162001077565b50565b62000ffc6200113b565b73ffffffffffffffffffffffffffffffffffffffff166200101c62000c24565b73ffffffffffffffffffffffffffffffffffffffff161462001075576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200106c9062001d0e565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6118348062001d3183390190565b61119e806200356583390190565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620011a08262001173565b9050919050565b620011b28162001193565b8114620011be57600080fd5b50565b600081359050620011d281620011a7565b92915050565b60038110620011e657600080fd5b50565b600081359050620011fa81620011d8565b92915050565b600080604083850312156200121a576200121962001169565b5b60006200122a85828601620011c1565b92505060206200123d85828601620011e9565b9150509250929050565b6000819050919050565b6200125c8162001247565b81146200126857600080fd5b50565b6000813590506200127c8162001251565b92915050565b6000602082840312156200129b576200129a62001169565b5b6000620012ab848285016200126b565b91505092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200130982620012be565b810181811067ffffffffffffffff821117156200132b576200132a620012cf565b5b80604052505050565b6000620013406200115f565b90506200134e8282620012fe565b919050565b600067ffffffffffffffff821115620013715762001370620012cf565b5b6200137c82620012be565b9050602081019050919050565b82818337600083830152505050565b6000620013af620013a98462001353565b62001334565b905082815260208101848484011115620013ce57620013cd620012b9565b5b620013db84828562001389565b509392505050565b600082601f830112620013fb57620013fa620012b4565b5b81356200140d84826020860162001398565b91505092915050565b6000806040838503121562001430576200142f62001169565b5b600062001440858286016200126b565b925050602083013567ffffffffffffffff8111156200146457620014636200116e565b5b6200147285828601620013e3565b9150509250929050565b6000819050919050565b6000620014a7620014a16200149b8462001173565b6200147c565b62001173565b9050919050565b6000620014bb8262001486565b9050919050565b6000620014cf82620014ae565b9050919050565b620014e181620014c2565b82525050565b6000602082019050620014fe6000830184620014d6565b92915050565b6000819050919050565b620015198162001504565b82525050565b60006020820190506200153660008301846200150e565b92915050565b620015478162001193565b82525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6003811062001590576200158f6200154d565b5b50565b6000819050620015a3826200157c565b919050565b6000620015b58262001593565b9050919050565b620015c781620015a8565b82525050565b6000604082019050620015e460008301856200153c565b620015f36020830184620015bc565b9392505050565b60006200160782620014ae565b9050919050565b6200161981620015fa565b82525050565b60006020820190506200163660008301846200160e565b92915050565b620016478162001247565b82525050565b60006020820190506200166460008301846200163c565b92915050565b60006020820190506200168160008301846200153c565b92915050565b60008060408385031215620016a157620016a062001169565b5b600083013567ffffffffffffffff811115620016c257620016c16200116e565b5b620016d085828601620013e3565b925050602083013567ffffffffffffffff811115620016f457620016f36200116e565b5b6200170285828601620013e3565b9150509250929050565b60006200171982620014ae565b9050919050565b6200172b816200170c565b82525050565b600060208201905062001748600083018462001720565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b620017858162001193565b82525050565b6200179681620015a8565b82525050565b604082016000820151620017b460008501826200177a565b506020820151620017c960208501826200178b565b50505050565b6000620017dd83836200179c565b60408301905092915050565b6000602082019050919050565b600062001803826200174e565b6200180f818562001759565b93506200181c836200176a565b8060005b8381101562001853578151620018378882620017cf565b97506200184483620017e9565b92505060018101905062001820565b5085935050505092915050565b600060208201905081810360008301526200187c8184620017f6565b905092915050565b6000602082840312156200189d576200189c62001169565b5b6000620018ad84828501620011c1565b91505092915050565b600082825260208201905092915050565b7f496e76616c6964206167656e7420696e64657800000000000000000000000000600082015250565b6000620018ff601383620018b6565b91506200190c82620018c7565b602082019050919050565b600060208201905081810360008301526200193281620018f0565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60005b83811015620019885780820151818401526020810190506200196b565b60008484015250505050565b6000620019ab620019a58462001353565b62001334565b905082815260208101848484011115620019ca57620019c9620012b9565b5b620019d784828562001968565b509392505050565b600082601f830112620019f757620019f6620012b4565b5b815162001a0984826020860162001994565b91505092915050565b60006020828403121562001a2b5762001a2a62001169565b5b600082015167ffffffffffffffff81111562001a4c5762001a4b6200116e565b5b62001a5a84828501620019df565b91505092915050565b600081519050919050565b600062001a7b8262001a63565b62001a878185620018b6565b935062001a9981856020860162001968565b62001aa481620012be565b840191505092915050565b600060408201905062001ac660008301856200163c565b818103602083015262001ada818462001a6e565b90509392505050565b7f496e76616c696420696e646976696475616c20696e6465780000000000000000600082015250565b600062001b1b601883620018b6565b915062001b288262001ae3565b602082019050919050565b6000602082019050818103600083015262001b4e8162001b0c565b9050919050565b6000602082019050818103600083015262001b71818462001a6e565b905092915050565b7f496e76616c6964206f7267616e697a6174696f6e20696e646578000000000000600082015250565b600062001bb1601a83620018b6565b915062001bbe8262001b79565b602082019050919050565b6000602082019050818103600083015262001be48162001ba2565b9050919050565b6000604082019050818103600083015262001c07818562001a6e565b9050818103602083015262001c1d818462001a6e565b90509392505050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600062001c84602683620018b6565b915062001c918262001c26565b604082019050919050565b6000602082019050818103600083015262001cb78162001c75565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600062001cf6602083620018b6565b915062001d038262001cbe565b602082019050919050565b6000602082019050818103600083015262001d298162001ce7565b905091905056fe60806040523480156200001157600080fd5b5060405162001834380380620018348339818101604052810190620000379190620002fd565b620000576200004b6200009e60201b60201c565b620000a660201b60201c565b8160019081620000689190620005cd565b5080600290816200007a9190620005cd565b506001600460006101000a81548160ff0219169083151502179055505050620006b4565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001d38262000188565b810181811067ffffffffffffffff82111715620001f557620001f462000199565b5b80604052505050565b60006200020a6200016a565b9050620002188282620001c8565b919050565b600067ffffffffffffffff8211156200023b576200023a62000199565b5b620002468262000188565b9050602081019050919050565b60005b838110156200027357808201518184015260208101905062000256565b60008484015250505050565b60006200029662000290846200021d565b620001fe565b905082815260208101848484011115620002b557620002b462000183565b5b620002c284828562000253565b509392505050565b600082601f830112620002e257620002e16200017e565b5b8151620002f48482602086016200027f565b91505092915050565b6000806040838503121562000317576200031662000174565b5b600083015167ffffffffffffffff81111562000338576200033762000179565b5b6200034685828601620002ca565b925050602083015167ffffffffffffffff8111156200036a576200036962000179565b5b6200037885828601620002ca565b9150509250929050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620003d557607f821691505b602082108103620003eb57620003ea6200038d565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620004557fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000416565b62000461868362000416565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620004ae620004a8620004a28462000479565b62000483565b62000479565b9050919050565b6000819050919050565b620004ca836200048d565b620004e2620004d982620004b5565b84845462000423565b825550505050565b600090565b620004f9620004ea565b62000506818484620004bf565b505050565b5b818110156200052e5762000522600082620004ef565b6001810190506200050c565b5050565b601f8211156200057d576200054781620003f1565b620005528462000406565b8101602085101562000562578190505b6200057a620005718562000406565b8301826200050b565b50505b505050565b600082821c905092915050565b6000620005a26000198460080262000582565b1980831691505092915050565b6000620005bd83836200058f565b9150826002028217905092915050565b620005d88262000382565b67ffffffffffffffff811115620005f457620005f362000199565b5b620006008254620003bc565b6200060d82828562000532565b600060209050601f83116001811462000645576000841562000630578287015190505b6200063c8582620005af565b865550620006ac565b601f1984166200065586620003f1565b60005b828110156200067f5784890151825560018201915060208501945060208101905062000658565b868310156200069f57848901516200069b601f8916826200058f565b8355505b6001600288020188555050505b505050505050565b61117080620006c46000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80638a15309b116100715780638a15309b146101405780638c23a3531461015c5780638da5cb5b1461017a578063c1cc57b014610198578063cb8d902c146101b6578063f2fde38b146101d2576100a9565b806306fdde03146100ae578063244d6daa146100cc57806326a18375146100fc578063715018a614610118578063856c71dd14610122575b600080fd5b6100b66101ee565b6040516100c39190610869565b60405180910390f35b6100e660048036038101906100e191906108d5565b61027c565b6040516100f39190610869565b60405180910390f35b6101166004803603810190610111919061093a565b610328565b005b61012061034d565b005b61012a610361565b6040516101379190610976565b60405180910390f35b61015a60048036038101906101559190610ac6565b610374565b005b6101646103eb565b6040516101719190610869565b60405180910390f35b610182610479565b60405161018f9190610b50565b60405180910390f35b6101a06104a2565b6040516101ad9190610c77565b60405180910390f35b6101d060048036038101906101cb9190610ac6565b61057b565b005b6101ec60048036038101906101e79190610cc5565b61060c565b005b600180546101fb90610d21565b80601f016020809104026020016040519081016040528092919081815260200182805461022790610d21565b80156102745780601f1061024957610100808354040283529160200191610274565b820191906000526020600020905b81548152906001019060200180831161025757829003601f168201915b505050505081565b6003818154811061028c57600080fd5b9060005260206000200160009150905080546102a790610d21565b80601f01602080910402602001604051908101604052809291908181526020018280546102d390610d21565b80156103205780601f106102f557610100808354040283529160200191610320565b820191906000526020600020905b81548152906001019060200180831161030357829003601f168201915b505050505081565b61033061068f565b80600460006101000a81548160ff02191690831515021790555050565b61035561068f565b61035f600061070d565b565b600460009054906101000a900460ff1681565b61037c61068f565b6003819080600181540180825580915050600190039060005260206000200160009091909190915090816103b09190610efe565b507f59059f4c91eb9cb9081478c3ed8944836dc5cdb0abb68ed29f4166a1ce441966816040516103e09190610869565b60405180910390a150565b600280546103f890610d21565b80601f016020809104026020016040519081016040528092919081815260200182805461042490610d21565b80156104715780601f1061044657610100808354040283529160200191610471565b820191906000526020600020905b81548152906001019060200180831161045457829003601f168201915b505050505081565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606003805480602002602001604051908101604052809291908181526020016000905b828210156105725783829060005260206000200180546104e590610d21565b80601f016020809104026020016040519081016040528092919081815260200182805461051190610d21565b801561055e5780601f106105335761010080835404028352916020019161055e565b820191906000526020600020905b81548152906001019060200180831161054157829003601f168201915b5050505050815260200190600101906104c6565b50505050905090565b61058361068f565b600460009054906101000a900460ff166105d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c99061101c565b60405180910390fd5b7fe661f69b340c857b7ae656ac737b7ee977a4e9e8e5bd4bcde5df4e17e17a3e4d816040516106019190610869565b60405180910390a150565b61061461068f565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610683576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067a906110ae565b60405180910390fd5b61068c8161070d565b50565b6106976107d1565b73ffffffffffffffffffffffffffffffffffffffff166106b5610479565b73ffffffffffffffffffffffffffffffffffffffff161461070b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107029061111a565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600081519050919050565b600082825260208201905092915050565b60005b838110156108135780820151818401526020810190506107f8565b60008484015250505050565b6000601f19601f8301169050919050565b600061083b826107d9565b61084581856107e4565b93506108558185602086016107f5565b61085e8161081f565b840191505092915050565b600060208201905081810360008301526108838184610830565b905092915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6108b28161089f565b81146108bd57600080fd5b50565b6000813590506108cf816108a9565b92915050565b6000602082840312156108eb576108ea610895565b5b60006108f9848285016108c0565b91505092915050565b60008115159050919050565b61091781610902565b811461092257600080fd5b50565b6000813590506109348161090e565b92915050565b6000602082840312156109505761094f610895565b5b600061095e84828501610925565b91505092915050565b61097081610902565b82525050565b600060208201905061098b6000830184610967565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6109d38261081f565b810181811067ffffffffffffffff821117156109f2576109f161099b565b5b80604052505050565b6000610a0561088b565b9050610a1182826109ca565b919050565b600067ffffffffffffffff821115610a3157610a3061099b565b5b610a3a8261081f565b9050602081019050919050565b82818337600083830152505050565b6000610a69610a6484610a16565b6109fb565b905082815260208101848484011115610a8557610a84610996565b5b610a90848285610a47565b509392505050565b600082601f830112610aad57610aac610991565b5b8135610abd848260208601610a56565b91505092915050565b600060208284031215610adc57610adb610895565b5b600082013567ffffffffffffffff811115610afa57610af961089a565b5b610b0684828501610a98565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b3a82610b0f565b9050919050565b610b4a81610b2f565b82525050565b6000602082019050610b656000830184610b41565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b6000610bb3826107d9565b610bbd8185610b97565b9350610bcd8185602086016107f5565b610bd68161081f565b840191505092915050565b6000610bed8383610ba8565b905092915050565b6000602082019050919050565b6000610c0d82610b6b565b610c178185610b76565b935083602082028501610c2985610b87565b8060005b85811015610c655784840389528151610c468582610be1565b9450610c5183610bf5565b925060208a01995050600181019050610c2d565b50829750879550505050505092915050565b60006020820190508181036000830152610c918184610c02565b905092915050565b610ca281610b2f565b8114610cad57600080fd5b50565b600081359050610cbf81610c99565b92915050565b600060208284031215610cdb57610cda610895565b5b6000610ce984828501610cb0565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610d3957607f821691505b602082108103610d4c57610d4b610cf2565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610db47fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610d77565b610dbe8683610d77565b95508019841693508086168417925050509392505050565b6000819050919050565b6000610dfb610df6610df18461089f565b610dd6565b61089f565b9050919050565b6000819050919050565b610e1583610de0565b610e29610e2182610e02565b848454610d84565b825550505050565b600090565b610e3e610e31565b610e49818484610e0c565b505050565b5b81811015610e6d57610e62600082610e36565b600181019050610e4f565b5050565b601f821115610eb257610e8381610d52565b610e8c84610d67565b81016020851015610e9b578190505b610eaf610ea785610d67565b830182610e4e565b50505b505050565b600082821c905092915050565b6000610ed560001984600802610eb7565b1980831691505092915050565b6000610eee8383610ec4565b9150826002028217905092915050565b610f07826107d9565b67ffffffffffffffff811115610f2057610f1f61099b565b5b610f2a8254610d21565b610f35828285610e71565b600060209050601f831160018114610f685760008415610f56578287015190505b610f608582610ee2565b865550610fc8565b601f198416610f7686610d52565b60005b82811015610f9e57848901518255600182019150602085019450602081019050610f79565b86831015610fbb5784890151610fb7601f891682610ec4565b8355505b6001600288020188555050505b505050505050565b7f4f7267616e697a6174696f6e206973206e6f7420617661696c61626c65000000600082015250565b6000611006601d836107e4565b915061101182610fd0565b602082019050919050565b6000602082019050818103600083015261103581610ff9565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006110986026836107e4565b91506110a38261103c565b604082019050919050565b600060208201905081810360008301526110c78161108b565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006111046020836107e4565b915061110f826110ce565b602082019050919050565b60006020820190508181036000830152611133816110f7565b905091905056fea2646970667358221220250f734efaff088dc4deb7dab7be2a85c71816a8b3feeec32db65e00405c9f1564736f6c6343000811003360806040523480156200001157600080fd5b506040516200119e3803806200119e8339818101604052810190620000379190620002fd565b620000576200004b6200009e60201b60201c565b620000a660201b60201c565b8160019081620000689190620005cd565b5080600290816200007a9190620005cd565b506001600360006101000a81548160ff0219169083151502179055505050620006b4565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001d38262000188565b810181811067ffffffffffffffff82111715620001f557620001f462000199565b5b80604052505050565b60006200020a6200016a565b9050620002188282620001c8565b919050565b600067ffffffffffffffff8211156200023b576200023a62000199565b5b620002468262000188565b9050602081019050919050565b60005b838110156200027357808201518184015260208101905062000256565b60008484015250505050565b60006200029662000290846200021d565b620001fe565b905082815260208101848484011115620002b557620002b462000183565b5b620002c284828562000253565b509392505050565b600082601f830112620002e257620002e16200017e565b5b8151620002f48482602086016200027f565b91505092915050565b6000806040838503121562000317576200031662000174565b5b600083015167ffffffffffffffff81111562000338576200033762000179565b5b6200034685828601620002ca565b925050602083015167ffffffffffffffff8111156200036a576200036962000179565b5b6200037885828601620002ca565b9150509250929050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620003d557607f821691505b602082108103620003eb57620003ea6200038d565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620004557fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000416565b62000461868362000416565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620004ae620004a8620004a28462000479565b62000483565b62000479565b9050919050565b6000819050919050565b620004ca836200048d565b620004e2620004d982620004b5565b84845462000423565b825550505050565b600090565b620004f9620004ea565b62000506818484620004bf565b505050565b5b818110156200052e5762000522600082620004ef565b6001810190506200050c565b5050565b601f8211156200057d576200054781620003f1565b620005528462000406565b8101602085101562000562578190505b6200057a620005718562000406565b8301826200050b565b50505b505050565b600082821c905092915050565b6000620005a26000198460080262000582565b1980831691505092915050565b6000620005bd83836200058f565b9150826002028217905092915050565b620005d88262000382565b67ffffffffffffffff811115620005f457620005f362000199565b5b620006008254620003bc565b6200060d82828562000532565b600060209050601f83116001811462000645576000841562000630578287015190505b6200063c8582620005af565b865550620006ac565b601f1984166200065586620003f1565b60005b828110156200067f5784890151825560018201915060208501945060208101905062000658565b868310156200069f57848901516200069b601f8916826200058f565b8355505b6001600288020188555050505b505050505050565b610ada80620006c46000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063856c71dd1161005b578063856c71dd146100ef5780638da5cb5b1461010d578063cb8d902c1461012b578063f2fde38b1461014757610088565b806306fdde031461008d57806326a18375146100ab5780633b7fdb73146100c7578063715018a6146100e5575b600080fd5b610095610163565b6040516100a291906105e2565b60405180910390f35b6100c560048036038101906100c09190610650565b6101f1565b005b6100cf610216565b6040516100dc91906105e2565b60405180910390f35b6100ed6102a4565b005b6100f76102b8565b604051610104919061068c565b60405180910390f35b6101156102cb565b60405161012291906106e8565b60405180910390f35b61014560048036038101906101409190610838565b6102f4565b005b610161600480360381019061015c91906108ad565b610385565b005b6001805461017090610909565b80601f016020809104026020016040519081016040528092919081815260200182805461019c90610909565b80156101e95780601f106101be576101008083540402835291602001916101e9565b820191906000526020600020905b8154815290600101906020018083116101cc57829003601f168201915b505050505081565b6101f9610408565b80600360006101000a81548160ff02191690831515021790555050565b6002805461022390610909565b80601f016020809104026020016040519081016040528092919081815260200182805461024f90610909565b801561029c5780601f106102715761010080835404028352916020019161029c565b820191906000526020600020905b81548152906001019060200180831161027f57829003601f168201915b505050505081565b6102ac610408565b6102b66000610486565b565b600360009054906101000a900460ff1681565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6102fc610408565b600360009054906101000a900460ff1661034b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034290610986565b60405180910390fd5b7fe661f69b340c857b7ae656ac737b7ee977a4e9e8e5bd4bcde5df4e17e17a3e4d8160405161037a91906105e2565b60405180910390a150565b61038d610408565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036103fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103f390610a18565b60405180910390fd5b61040581610486565b50565b61041061054a565b73ffffffffffffffffffffffffffffffffffffffff1661042e6102cb565b73ffffffffffffffffffffffffffffffffffffffff1614610484576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047b90610a84565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600081519050919050565b600082825260208201905092915050565b60005b8381101561058c578082015181840152602081019050610571565b60008484015250505050565b6000601f19601f8301169050919050565b60006105b482610552565b6105be818561055d565b93506105ce81856020860161056e565b6105d781610598565b840191505092915050565b600060208201905081810360008301526105fc81846105a9565b905092915050565b6000604051905090565b600080fd5b600080fd5b60008115159050919050565b61062d81610618565b811461063857600080fd5b50565b60008135905061064a81610624565b92915050565b6000602082840312156106665761066561060e565b5b60006106748482850161063b565b91505092915050565b61068681610618565b82525050565b60006020820190506106a1600083018461067d565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106d2826106a7565b9050919050565b6106e2816106c7565b82525050565b60006020820190506106fd60008301846106d9565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61074582610598565b810181811067ffffffffffffffff821117156107645761076361070d565b5b80604052505050565b6000610777610604565b9050610783828261073c565b919050565b600067ffffffffffffffff8211156107a3576107a261070d565b5b6107ac82610598565b9050602081019050919050565b82818337600083830152505050565b60006107db6107d684610788565b61076d565b9050828152602081018484840111156107f7576107f6610708565b5b6108028482856107b9565b509392505050565b600082601f83011261081f5761081e610703565b5b813561082f8482602086016107c8565b91505092915050565b60006020828403121561084e5761084d61060e565b5b600082013567ffffffffffffffff81111561086c5761086b610613565b5b6108788482850161080a565b91505092915050565b61088a816106c7565b811461089557600080fd5b50565b6000813590506108a781610881565b92915050565b6000602082840312156108c3576108c261060e565b5b60006108d184828501610898565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061092157607f821691505b602082108103610934576109336108da565b5b50919050565b7f496e646976696475616c206973206e6f7420617661696c61626c650000000000600082015250565b6000610970601b8361055d565b915061097b8261093a565b602082019050919050565b6000602082019050818103600083015261099f81610963565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000610a0260268361055d565b9150610a0d826109a6565b604082019050919050565b60006020820190508181036000830152610a31816109f5565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610a6e60208361055d565b9150610a7982610a38565b602082019050919050565b60006020820190508181036000830152610a9d81610a61565b905091905056fea26469706673582212203d755d9c2f19de89e59610f0537f87096d5955c50a8230bb172ff10d1400afef64736f6c63430008110033a2646970667358221220c97277b50f9fd41976142e6db1fd14647aa3baa0171bdbf10fd27e819374a8a464736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Disaster.sol:Disaster",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1297,
        "contract": "contracts/Disaster.sol:Disaster",
        "label": "latitude",
        "offset": 0,
        "slot": "1",
        "type": "t_int256"
      },
      {
        "astId": 1299,
        "contract": "contracts/Disaster.sol:Disaster",
        "label": "longitude",
        "offset": 0,
        "slot": "2",
        "type": "t_int256"
      },
      {
        "astId": 1301,
        "contract": "contracts/Disaster.sol:Disaster",
        "label": "timestamp",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1305,
        "contract": "contracts/Disaster.sol:Disaster",
        "label": "agents",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_struct(Agent)1295_storage)dyn_storage"
      },
      {
        "astId": 1309,
        "contract": "contracts/Disaster.sol:Disaster",
        "label": "organizations",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_contract(HumanOrganization)2443)dyn_storage"
      },
      {
        "astId": 1313,
        "contract": "contracts/Disaster.sol:Disaster",
        "label": "individuals",
        "offset": 0,
        "slot": "6",
        "type": "t_array(t_contract(Individual)2508)dyn_storage"
      },
      {
        "astId": 1316,
        "contract": "contracts/Disaster.sol:Disaster",
        "label": "dao",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(DisasterResponseDAO)2344"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(HumanOrganization)2443)dyn_storage": {
        "base": "t_contract(HumanOrganization)2443",
        "encoding": "dynamic_array",
        "label": "contract HumanOrganization[]",
        "numberOfBytes": "32"
      },
      "t_array(t_contract(Individual)2508)dyn_storage": {
        "base": "t_contract(Individual)2508",
        "encoding": "dynamic_array",
        "label": "contract Individual[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Agent)1295_storage)dyn_storage": {
        "base": "t_struct(Agent)1295_storage",
        "encoding": "dynamic_array",
        "label": "struct Disaster.Agent[]",
        "numberOfBytes": "32"
      },
      "t_contract(DisasterResponseDAO)2344": {
        "encoding": "inplace",
        "label": "contract DisasterResponseDAO",
        "numberOfBytes": "20"
      },
      "t_contract(HumanOrganization)2443": {
        "encoding": "inplace",
        "label": "contract HumanOrganization",
        "numberOfBytes": "20"
      },
      "t_contract(Individual)2508": {
        "encoding": "inplace",
        "label": "contract Individual",
        "numberOfBytes": "20"
      },
      "t_enum(AgentType)1289": {
        "encoding": "inplace",
        "label": "enum Disaster.AgentType",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_struct(Agent)1295_storage": {
        "encoding": "inplace",
        "label": "struct Disaster.Agent",
        "members": [
          {
            "astId": 1291,
            "contract": "contracts/Disaster.sol:Disaster",
            "label": "agentAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1294,
            "contract": "contracts/Disaster.sol:Disaster",
            "label": "agentType",
            "offset": 20,
            "slot": "0",
            "type": "t_enum(AgentType)1289"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
