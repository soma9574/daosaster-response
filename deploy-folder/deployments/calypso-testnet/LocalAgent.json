{
  "address": "0x89516cde3349B766ee3030297BF38dbD82da3B6e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_disasterRegistryAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "agent",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "latitude",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "longitude",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "altitude",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "imageDescription",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "emergencyAnalysis",
          "type": "string"
        }
      ],
      "name": "DroneDataUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "agent",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "resourceType",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "latitude",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "int256",
          "name": "longitude",
          "type": "int256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "name": "ResourceLocationAdded",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_resourceType",
          "type": "string"
        },
        {
          "internalType": "int256",
          "name": "_latitude",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "_longitude",
          "type": "int256"
        },
        {
          "internalType": "string",
          "name": "_description",
          "type": "string"
        }
      ],
      "name": "addResourceLocation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "disasterRegistry",
      "outputs": [
        {
          "internalType": "contract DisasterRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDisasterRegistryAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestDroneData",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "latitude",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "longitude",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "altitude",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "imageDescription",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "emergencyAnalysis",
              "type": "string"
            }
          ],
          "internalType": "struct LocalAgent.DroneData",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getResourceLocations",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "resourceType",
              "type": "string"
            },
            {
              "internalType": "int256",
              "name": "latitude",
              "type": "int256"
            },
            {
              "internalType": "int256",
              "name": "longitude",
              "type": "int256"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            }
          ],
          "internalType": "struct LocalAgent.ResourceLocation[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestDroneData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "latitude",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "longitude",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "altitude",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "imageDescription",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "emergencyAnalysis",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "monitorLocalSensors",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "_latitude",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "_longitude",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "_timestamp",
          "type": "uint256"
        }
      ],
      "name": "reportDisaster",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_disasterInfo",
          "type": "string"
        }
      ],
      "name": "reportLocalDisaster",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "resourceLocations",
      "outputs": [
        {
          "internalType": "string",
          "name": "resourceType",
          "type": "string"
        },
        {
          "internalType": "int256",
          "name": "latitude",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "longitude",
          "type": "int256"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "_latitude",
          "type": "int256"
        },
        {
          "internalType": "int256",
          "name": "_longitude",
          "type": "int256"
        },
        {
          "internalType": "uint256",
          "name": "_altitude",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_imageDescription",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_emergencyAnalysis",
          "type": "string"
        }
      ],
      "name": "updateDroneData",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x4ea0050ccc8623fec1c273afda3b49cb1ad2af0e2beb6c73256fcb6d33aba1fb",
  "receipt": {
    "to": "0x0000000000000000000000000000000000000000",
    "from": "0xD7d201B7B9FceE8F7e77cb3DB8C77A93caef2D42",
    "contractAddress": "0x89516cde3349B766ee3030297BF38dbD82da3B6e",
    "transactionIndex": 0,
    "gasUsed": "1841310",
    "logsBloom": "0x
    "blockHash": "0xc311635f0165a196fb98eac6d024fc59ff2aeedcde67d1787c2ce4fbd89d7084",
    "transactionHash": "0x4ea0050ccc8623fec1c273afda3b49cb1ad2af0e2beb6c73256fcb6d33aba1fb",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2316920,
        "transactionHash": "0x4ea0050ccc8623fec1c273afda3b49cb1ad2af0e2beb6c73256fcb6d33aba1fb",
        "address": "0x89516cde3349B766ee3030297BF38dbD82da3B6e",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000d7d201b7b9fcee8f7e77cb3db8c77a93caef2d42"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xc311635f0165a196fb98eac6d024fc59ff2aeedcde67d1787c2ce4fbd89d7084"
      }
    ],
    "blockNumber": 2316920,
    "cumulativeGasUsed": "1841310",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0948e40e40860A02956E70E814c8C5088f4049E0"
  ],
  "numDeployments": 7,
  "solcInputHash": "7ebf246ddee52b9b8719d3356a7e5fee",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_disasterRegistryAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"latitude\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"longitude\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"altitude\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"imageDescription\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"emergencyAnalysis\",\"type\":\"string\"}],\"name\":\"DroneDataUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"agent\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"resourceType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"latitude\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"int256\",\"name\":\"longitude\",\"type\":\"int256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"name\":\"ResourceLocationAdded\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_resourceType\",\"type\":\"string\"},{\"internalType\":\"int256\",\"name\":\"_latitude\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"_longitude\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"_description\",\"type\":\"string\"}],\"name\":\"addResourceLocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"disasterRegistry\",\"outputs\":[{\"internalType\":\"contract DisasterRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDisasterRegistryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestDroneData\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"latitude\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"longitude\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"altitude\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"imageDescription\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"emergencyAnalysis\",\"type\":\"string\"}],\"internalType\":\"struct LocalAgent.DroneData\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getResourceLocations\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"resourceType\",\"type\":\"string\"},{\"internalType\":\"int256\",\"name\":\"latitude\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"longitude\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"internalType\":\"struct LocalAgent.ResourceLocation[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestDroneData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"latitude\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"longitude\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"altitude\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"imageDescription\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"emergencyAnalysis\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"monitorLocalSensors\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_latitude\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"_longitude\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_timestamp\",\"type\":\"uint256\"}],\"name\":\"reportDisaster\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_disasterInfo\",\"type\":\"string\"}],\"name\":\"reportLocalDisaster\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"resourceLocations\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"resourceType\",\"type\":\"string\"},{\"internalType\":\"int256\",\"name\":\"latitude\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"longitude\",\"type\":\"int256\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_latitude\",\"type\":\"int256\"},{\"internalType\":\"int256\",\"name\":\"_longitude\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"_altitude\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_imageDescription\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_emergencyAnalysis\",\"type\":\"string\"}],\"name\":\"updateDroneData\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/agents/LocalAgent.sol\":\"LocalAgent\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x58b21219689909c4f8339af00813760337f7e2e7f169a97fe49e2896dcfb3b9a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/Disaster.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\ncontract Disaster {\\n    enum AgentType {\\n        FirstResponder,\\n        Volunteer,\\n        Other\\n    }\\n\\n    struct Agent {\\n        address agentAddress;\\n        AgentType agentType;\\n    }\\n\\n    int256 public latitude;\\n    int256 public longitude;\\n    uint256 public timestamp;\\n    Agent[] public agents;\\n\\n    event AgentAttached(address indexed agent, AgentType agentType);\\n\\n    constructor(\\n        int256 _latitude,\\n        int256 _longitude,\\n        uint256 _timestamp,\\n        address _firstAgent,\\n        AgentType _firstAgentType,\\n        address _daoAddress\\n    ) {\\n        latitude = _latitude;\\n        longitude = _longitude;\\n        timestamp = _timestamp;\\n        agents.push(Agent(_firstAgent, _firstAgentType));\\n        emit AgentAttached(_firstAgent, _firstAgentType);\\n    }\\n\\n    function attachAgent(address _agent, AgentType _agentType) external {\\n        agents.push(Agent(_agent, _agentType));\\n        emit AgentAttached(_agent, _agentType);\\n    }\\n\\n    function getAgents() external view returns (Agent[] memory) {\\n        return agents;\\n    }\\n}\\n\",\"keccak256\":\"0x01017c84170c5424d6ec6be85af779e58362e8e868d61eb6b2aeba058d2b6ffa\",\"license\":\"MIT\"},\"contracts/DisasterRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"./Disaster.sol\\\";\\nimport \\\"./agents/LocalAgent.sol\\\"; // Add this import\\n\\ncontract DisasterRegistry {\\n    using SafeMath for uint256;\\n\\n    Disaster[] public disasters;\\n    uint256 public constant PROXIMITY_THRESHOLD = 50; // 50 km, adjust as needed\\n\\n    event DisasterCreated(\\n        uint256 indexed disasterId,\\n        address disasterContract,\\n        int256 latitude,\\n        int256 longitude,\\n        uint256 timestamp,\\n        Disaster.AgentType agentType\\n    );\\n\\n    event AgentAttachedToDisaster(\\n        uint256 indexed disasterId,\\n        address agent,\\n        Disaster.AgentType agentType\\n    );\\n\\n    event LocalAgentCreated(\\n        address indexed localAgentAddress,\\n        uint256 indexed disasterId\\n    );\\n\\n    function reportDisaster(\\n        int256 _latitude,\\n        int256 _longitude,\\n        uint256 _timestamp,\\n        Disaster.AgentType _agentType\\n    ) external {\\n        uint256 existingDisasterId = findNearbyDisaster(_latitude, _longitude);\\n\\n        if (existingDisasterId == type(uint256).max) {\\n            // Create new disaster\\n            Disaster newDisaster = new Disaster(\\n                _latitude,\\n                _longitude,\\n                _timestamp,\\n                msg.sender,\\n                _agentType,\\n                address(0) // Replace with actual DAO address if needed\\n            );\\n            uint256 newDisasterId = disasters.length;\\n            disasters.push(newDisaster);\\n\\n            // Create LocalAgent\\n            LocalAgent localAgent = new LocalAgent(address(this));\\n\\n            emit DisasterCreated(\\n                newDisasterId,\\n                address(newDisaster),\\n                _latitude,\\n                _longitude,\\n                _timestamp,\\n                _agentType\\n            );\\n            emit LocalAgentCreated(address(localAgent), newDisasterId);\\n        } else {\\n            // Attach to existing disaster\\n            disasters[existingDisasterId].attachAgent(msg.sender, _agentType);\\n            emit AgentAttachedToDisaster(\\n                existingDisasterId,\\n                msg.sender,\\n                _agentType\\n            );\\n        }\\n    }\\n\\n    function findNearbyDisaster(\\n        int256 _latitude,\\n        int256 _longitude\\n    ) internal view returns (uint256) {\\n        for (uint256 i = 0; i < disasters.length; i++) {\\n            Disaster disaster = disasters[i];\\n            if (\\n                calculateDistance(\\n                    _latitude,\\n                    _longitude,\\n                    disaster.latitude(),\\n                    disaster.longitude()\\n                ) <= PROXIMITY_THRESHOLD\\n            ) {\\n                return i;\\n            }\\n        }\\n        return type(uint256).max;\\n    }\\n\\n    function calculateDistance(\\n        int256 lat1,\\n        int256 lon1,\\n        int256 lat2,\\n        int256 lon2\\n    ) internal pure returns (uint256) {\\n        // Simplified distance calculation (Haversine formula)\\n        // Note: This is a rough approximation and doesn't account for Earth's curvature\\n        int256 dLat = lat2 - lat1;\\n        int256 dLon = lon2 - lon1;\\n        return uint256(sqrt((dLat * dLat) + (dLon * dLon)));\\n    }\\n\\n    function sqrt(int256 x) internal pure returns (int256 y) {\\n        int256 z = (x + 1) / 2;\\n        y = x;\\n        while (z < y) {\\n            y = z;\\n            z = (x / z + z) / 2;\\n        }\\n    }\\n\\n    function getDisasterCount() external view returns (uint256) {\\n        return disasters.length;\\n    }\\n\\n    function getDisasterContract(\\n        uint256 _disasterId\\n    ) external view returns (address) {\\n        require(_disasterId < disasters.length, \\\"Invalid disaster ID\\\");\\n        return address(disasters[_disasterId]);\\n    }\\n}\\n\",\"keccak256\":\"0x0d0ca60d5a2e959c147a2705da0f064a9b8a1df2f862ac64ff555f67d33e6ecc\",\"license\":\"MIT\"},\"contracts/agents/LocalAgent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport \\\"../DisasterRegistry.sol\\\";\\nimport \\\"../Disaster.sol\\\";\\n\\ncontract LocalAgent is Ownable {\\n    struct DroneData {\\n        uint256 timestamp;\\n        int256 latitude;\\n        int256 longitude;\\n        uint256 altitude;\\n        string imageDescription;\\n        string emergencyAnalysis;\\n    }\\n\\n    struct ResourceLocation {\\n        string resourceType;\\n        int256 latitude;\\n        int256 longitude;\\n        string description;\\n    }\\n\\n    DroneData public latestDroneData;\\n    ResourceLocation[] public resourceLocations;\\n    DisasterRegistry public disasterRegistry;\\n\\n    event DroneDataUpdated(\\n        address indexed agent,\\n        uint256 timestamp,\\n        int256 latitude,\\n        int256 longitude,\\n        uint256 altitude,\\n        string imageDescription,\\n        string emergencyAnalysis\\n    );\\n    event ResourceLocationAdded(\\n        address indexed agent,\\n        string resourceType,\\n        int256 latitude,\\n        int256 longitude,\\n        string description\\n    );\\n\\n    function monitorLocalSensors() external pure returns (string memory) {\\n        return \\\"Monitoring local sensors\\\";\\n    }\\n\\n    function reportLocalDisaster(\\n        string memory _disasterInfo\\n    ) external pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\\"Reporting local disaster: \\\", _disasterInfo)\\n            );\\n    }\\n\\n    function updateDroneData(\\n        int256 _latitude,\\n        int256 _longitude,\\n        uint256 _altitude,\\n        string memory _imageDescription,\\n        string memory _emergencyAnalysis\\n    ) external {\\n        latestDroneData = DroneData({\\n            timestamp: block.timestamp,\\n            latitude: _latitude,\\n            longitude: _longitude,\\n            altitude: _altitude,\\n            imageDescription: _imageDescription,\\n            emergencyAnalysis: _emergencyAnalysis\\n        });\\n\\n        emit DroneDataUpdated(\\n            msg.sender,\\n            block.timestamp,\\n            _latitude,\\n            _longitude,\\n            _altitude,\\n            _imageDescription,\\n            _emergencyAnalysis\\n        );\\n    }\\n\\n    function addResourceLocation(\\n        string memory _resourceType,\\n        int256 _latitude,\\n        int256 _longitude,\\n        string memory _description\\n    ) external {\\n        ResourceLocation memory newResource = ResourceLocation({\\n            resourceType: _resourceType,\\n            latitude: _latitude,\\n            longitude: _longitude,\\n            description: _description\\n        });\\n        resourceLocations.push(newResource);\\n\\n        emit ResourceLocationAdded(\\n            msg.sender,\\n            _resourceType,\\n            _latitude,\\n            _longitude,\\n            _description\\n        );\\n    }\\n\\n    function getResourceLocations()\\n        external\\n        view\\n        returns (ResourceLocation[] memory)\\n    {\\n        return resourceLocations;\\n    }\\n\\n    function getLatestDroneData() external view returns (DroneData memory) {\\n        return latestDroneData;\\n    }\\n\\n    constructor(address _disasterRegistryAddress) {\\n        disasterRegistry = DisasterRegistry(_disasterRegistryAddress);\\n    }\\n\\n    function reportDisaster(\\n        int256 _latitude,\\n        int256 _longitude,\\n        uint256 _timestamp\\n    ) external onlyOwner {\\n        require(\\n            address(disasterRegistry) != address(0),\\n            \\\"DisasterRegistry not set\\\"\\n        );\\n        try\\n            disasterRegistry.reportDisaster(\\n                _latitude,\\n                _longitude,\\n                _timestamp,\\n                Disaster.AgentType.Other\\n            )\\n        {\\n            // Success\\n        } catch Error(string memory) {\\n            revert(\\\"DisasterRegistry.reportDisaster failed with error\\\");\\n        } catch {\\n            revert(\\n                \\\"DisasterRegistry.reportDisaster failed with low-level error\\\"\\n            );\\n        }\\n    }\\n\\n    function getDisasterRegistryAddress() public view returns (address) {\\n        return address(disasterRegistry);\\n    }\\n}\\n\",\"keccak256\":\"0x71cbeb47e76a108a751fa542ef9ee7ea40732a35444e7950a719fb36b761a817\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b506040516200218e3803806200218e8339818101604052810190620000379190620001d5565b620000576200004b6200009f60201b60201c565b620000a760201b60201c565b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000207565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200019d8262000170565b9050919050565b620001af8162000190565b8114620001bb57600080fd5b50565b600081519050620001cf81620001a4565b92915050565b600060208284031215620001ee57620001ed6200016b565b5b6000620001fe84828501620001be565b91505092915050565b611f7780620002176000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806361064c631161008c578063a14e9fc711610066578063a14e9fc71461021a578063a3b9ba8014610236578063c7551a8d14610269578063f2fde38b14610287576100ea565b806361064c63146101d4578063715018a6146101f25780638da5cb5b146101fc576100ea565b80634b2588ad116100c85780634b2588ad1461015e578063508b01551461017c578063527ea2981461019857806359054590146101b6576100ea565b80630ca958e1146100ef5780631bdfa0cf1461010b5780634047a1d51461013b575b600080fd5b61010960048036038101906101049190611051565b6102a3565b005b610125600480360381019061012091906110f0565b610391565b60405161013291906111b8565b60405180910390f35b6101436103ba565b60405161015596959493929190611202565b60405180910390f35b6101666104f4565b60405161017391906111b8565b60405180910390f35b6101966004803603810190610191919061129d565b610531565b005b6101a06106ff565b6040516101ad91906113e8565b60405180910390f35b6101be610865565b6040516101cb9190611489565b60405180910390f35b6101dc61088b565b6040516101e991906115d0565b60405180910390f35b6101fa610a22565b005b610204610a36565b6040516102119190611613565b60405180910390f35b610234600480360381019061022f919061162e565b610a5f565b005b610250600480360381019061024b91906116e1565b610b44565b604051610260949392919061170e565b60405180910390f35b610271610c94565b60405161027e9190611613565b60405180910390f35b6102a1600480360381019061029c919061178d565b610cbe565b005b600060405180608001604052808681526020018581526020018481526020018381525090506007819080600181540180825580915050600190039060005260206000209060040201600090919091909150600082015181600001908161030991906119bc565b506020820151816001015560408201518160020155606082015181600301908161033391906119bc565b5050503373ffffffffffffffffffffffffffffffffffffffff167f49639324105a63a7f168f4f347c0100c9ec8f24d2e12d1582a820d7e29e25b3e86868686604051610382949392919061170e565b60405180910390a25050505050565b6060816040516020016103a49190611b16565b6040516020818303038152906040529050919050565b60018060000154908060010154908060020154908060030154908060040180546103e3906117e9565b80601f016020809104026020016040519081016040528092919081815260200182805461040f906117e9565b801561045c5780601f106104315761010080835404028352916020019161045c565b820191906000526020600020905b81548152906001019060200180831161043f57829003601f168201915b505050505090806005018054610471906117e9565b80601f016020809104026020016040519081016040528092919081815260200182805461049d906117e9565b80156104ea5780601f106104bf576101008083540402835291602001916104ea565b820191906000526020600020905b8154815290600101906020018083116104cd57829003601f168201915b5050505050905086565b60606040518060400160405280601881526020017f4d6f6e69746f72696e67206c6f63616c2073656e736f72730000000000000000815250905090565b610539610d41565b600073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036105ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c190611b84565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663716ce05384848460026040518563ffffffff1660e01b815260040161062c9493929190611c1b565b600060405180830381600087803b15801561064657600080fd5b505af1925050508015610657575060015b6106fa57610663611c6d565b806308c379a0036106bd5750610677611c8f565b8061068257506106bf565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b490611d91565b60405180910390fd5b505b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f190611e23565b60405180910390fd5b505050565b610707610e8b565b60016040518060c00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201805461074c906117e9565b80601f0160208091040260200160405190810160405280929190818152602001828054610778906117e9565b80156107c55780601f1061079a576101008083540402835291602001916107c5565b820191906000526020600020905b8154815290600101906020018083116107a857829003601f168201915b505050505081526020016005820180546107de906117e9565b80601f016020809104026020016040519081016040528092919081815260200182805461080a906117e9565b80156108575780601f1061082c57610100808354040283529160200191610857565b820191906000526020600020905b81548152906001019060200180831161083a57829003601f168201915b505050505081525050905090565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606007805480602002602001604051908101604052809291908181526020016000905b82821015610a1957838290600052602060002090600402016040518060800160405290816000820180546108e2906117e9565b80601f016020809104026020016040519081016040528092919081815260200182805461090e906117e9565b801561095b5780601f106109305761010080835404028352916020019161095b565b820191906000526020600020905b81548152906001019060200180831161093e57829003601f168201915b505050505081526020016001820154815260200160028201548152602001600382018054610988906117e9565b80601f01602080910402602001604051908101604052809291908181526020018280546109b4906117e9565b8015610a015780601f106109d657610100808354040283529160200191610a01565b820191906000526020600020905b8154815290600101906020018083116109e457829003601f168201915b505050505081525050815260200190600101906108af565b50505050905090565b610a2a610d41565b610a346000610dbf565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6040518060c00160405280428152602001868152602001858152602001848152602001838152602001828152506001600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004019081610acb91906119bc565b5060a0820151816005019081610ae191906119bc565b509050503373ffffffffffffffffffffffffffffffffffffffff167fac8a15d6303120358858ab94d2154ff143f6545f227448c10742ba83c9acf083428787878787604051610b3596959493929190611202565b60405180910390a25050505050565b60078181548110610b5457600080fd5b9060005260206000209060040201600091509050806000018054610b77906117e9565b80601f0160208091040260200160405190810160405280929190818152602001828054610ba3906117e9565b8015610bf05780601f10610bc557610100808354040283529160200191610bf0565b820191906000526020600020905b815481529060010190602001808311610bd357829003601f168201915b505050505090806001015490806002015490806003018054610c11906117e9565b80601f0160208091040260200160405190810160405280929190818152602001828054610c3d906117e9565b8015610c8a5780601f10610c5f57610100808354040283529160200191610c8a565b820191906000526020600020905b815481529060010190602001808311610c6d57829003601f168201915b5050505050905084565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610cc6610d41565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610d35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2c90611eb5565b60405180910390fd5b610d3e81610dbf565b50565b610d49610e83565b73ffffffffffffffffffffffffffffffffffffffff16610d67610a36565b73ffffffffffffffffffffffffffffffffffffffff1614610dbd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610db490611f21565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6040518060c001604052806000815260200160008152602001600081526020016000815260200160608152602001606081525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610f2882610edf565b810181811067ffffffffffffffff82111715610f4757610f46610ef0565b5b80604052505050565b6000610f5a610ec1565b9050610f668282610f1f565b919050565b600067ffffffffffffffff821115610f8657610f85610ef0565b5b610f8f82610edf565b9050602081019050919050565b82818337600083830152505050565b6000610fbe610fb984610f6b565b610f50565b905082815260208101848484011115610fda57610fd9610eda565b5b610fe5848285610f9c565b509392505050565b600082601f83011261100257611001610ed5565b5b8135611012848260208601610fab565b91505092915050565b6000819050919050565b61102e8161101b565b811461103957600080fd5b50565b60008135905061104b81611025565b92915050565b6000806000806080858703121561106b5761106a610ecb565b5b600085013567ffffffffffffffff81111561108957611088610ed0565b5b61109587828801610fed565b94505060206110a68782880161103c565b93505060406110b78782880161103c565b925050606085013567ffffffffffffffff8111156110d8576110d7610ed0565b5b6110e487828801610fed565b91505092959194509250565b60006020828403121561110657611105610ecb565b5b600082013567ffffffffffffffff81111561112457611123610ed0565b5b61113084828501610fed565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611173578082015181840152602081019050611158565b60008484015250505050565b600061118a82611139565b6111948185611144565b93506111a4818560208601611155565b6111ad81610edf565b840191505092915050565b600060208201905081810360008301526111d2818461117f565b905092915050565b6000819050919050565b6111ed816111da565b82525050565b6111fc8161101b565b82525050565b600060c08201905061121760008301896111e4565b61122460208301886111f3565b61123160408301876111f3565b61123e60608301866111e4565b8181036080830152611250818561117f565b905081810360a0830152611264818461117f565b9050979650505050505050565b61127a816111da565b811461128557600080fd5b50565b60008135905061129781611271565b92915050565b6000806000606084860312156112b6576112b5610ecb565b5b60006112c48682870161103c565b93505060206112d58682870161103c565b92505060406112e686828701611288565b9150509250925092565b6112f9816111da565b82525050565b6113088161101b565b82525050565b600082825260208201905092915050565b600061132a82611139565b611334818561130e565b9350611344818560208601611155565b61134d81610edf565b840191505092915050565b600060c08301600083015161137060008601826112f0565b50602083015161138360208601826112ff565b50604083015161139660408601826112ff565b5060608301516113a960608601826112f0565b50608083015184820360808601526113c1828261131f565b91505060a083015184820360a08601526113db828261131f565b9150508091505092915050565b600060208201905081810360008301526114028184611358565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061144f61144a6114458461140a565b61142a565b61140a565b9050919050565b600061146182611434565b9050919050565b600061147382611456565b9050919050565b61148381611468565b82525050565b600060208201905061149e600083018461147a565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600060808301600083015184820360008601526114ed828261131f565b915050602083015161150260208601826112ff565b50604083015161151560408601826112ff565b506060830151848203606086015261152d828261131f565b9150508091505092915050565b600061154683836114d0565b905092915050565b6000602082019050919050565b6000611566826114a4565b61157081856114af565b935083602082028501611582856114c0565b8060005b858110156115be578484038952815161159f858261153a565b94506115aa8361154e565b925060208a01995050600181019050611586565b50829750879550505050505092915050565b600060208201905081810360008301526115ea818461155b565b905092915050565b60006115fd8261140a565b9050919050565b61160d816115f2565b82525050565b60006020820190506116286000830184611604565b92915050565b600080600080600060a0868803121561164a57611649610ecb565b5b60006116588882890161103c565b95505060206116698882890161103c565b945050604061167a88828901611288565b935050606086013567ffffffffffffffff81111561169b5761169a610ed0565b5b6116a788828901610fed565b925050608086013567ffffffffffffffff8111156116c8576116c7610ed0565b5b6116d488828901610fed565b9150509295509295909350565b6000602082840312156116f7576116f6610ecb565b5b600061170584828501611288565b91505092915050565b60006080820190508181036000830152611728818761117f565b905061173760208301866111f3565b61174460408301856111f3565b8181036060830152611756818461117f565b905095945050505050565b61176a816115f2565b811461177557600080fd5b50565b60008135905061178781611761565b92915050565b6000602082840312156117a3576117a2610ecb565b5b60006117b184828501611778565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061180157607f821691505b602082108103611814576118136117ba565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261187c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261183f565b611886868361183f565b95508019841693508086168417925050509392505050565b60006118b96118b46118af846111da565b61142a565b6111da565b9050919050565b6000819050919050565b6118d38361189e565b6118e76118df826118c0565b84845461184c565b825550505050565b600090565b6118fc6118ef565b6119078184846118ca565b505050565b5b8181101561192b576119206000826118f4565b60018101905061190d565b5050565b601f821115611970576119418161181a565b61194a8461182f565b81016020851015611959578190505b61196d6119658561182f565b83018261190c565b50505b505050565b600082821c905092915050565b600061199360001984600802611975565b1980831691505092915050565b60006119ac8383611982565b9150826002028217905092915050565b6119c582611139565b67ffffffffffffffff8111156119de576119dd610ef0565b5b6119e882546117e9565b6119f382828561192f565b600060209050601f831160018114611a265760008415611a14578287015190505b611a1e85826119a0565b865550611a86565b601f198416611a348661181a565b60005b82811015611a5c57848901518255600182019150602085019450602081019050611a37565b86831015611a795784890151611a75601f891682611982565b8355505b6001600288020188555050505b505050505050565b600081905092915050565b7f5265706f7274696e67206c6f63616c2064697361737465723a20000000000000600082015250565b6000611acf601a83611a8e565b9150611ada82611a99565b601a82019050919050565b6000611af082611139565b611afa8185611a8e565b9350611b0a818560208601611155565b80840191505092915050565b6000611b2182611ac2565b9150611b2d8284611ae5565b915081905092915050565b7f44697361737465725265676973747279206e6f74207365740000000000000000600082015250565b6000611b6e601883611144565b9150611b7982611b38565b602082019050919050565b60006020820190508181036000830152611b9d81611b61565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110611be457611be3611ba4565b5b50565b6000819050611bf582611bd3565b919050565b6000611c0582611be7565b9050919050565b611c1581611bfa565b82525050565b6000608082019050611c3060008301876111f3565b611c3d60208301866111f3565b611c4a60408301856111e4565b611c576060830184611c0c565b95945050505050565b60008160e01c9050919050565b600060033d1115611c8c5760046000803e611c89600051611c60565b90505b90565b600060443d10611d1c57611ca1610ec1565b60043d036004823e80513d602482011167ffffffffffffffff82111715611cc9575050611d1c565b808201805167ffffffffffffffff811115611ce75750505050611d1c565b80602083010160043d038501811115611d04575050505050611d1c565b611d1382602001850186610f1f565b82955050505050505b90565b7f446973617374657252656769737472792e7265706f727444697361737465722060008201527f6661696c65642077697468206572726f72000000000000000000000000000000602082015250565b6000611d7b603183611144565b9150611d8682611d1f565b604082019050919050565b60006020820190508181036000830152611daa81611d6e565b9050919050565b7f446973617374657252656769737472792e7265706f727444697361737465722060008201527f6661696c65642077697468206c6f772d6c6576656c206572726f720000000000602082015250565b6000611e0d603b83611144565b9150611e1882611db1565b604082019050919050565b60006020820190508181036000830152611e3c81611e00565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611e9f602683611144565b9150611eaa82611e43565b604082019050919050565b60006020820190508181036000830152611ece81611e92565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611f0b602083611144565b9150611f1682611ed5565b602082019050919050565b60006020820190508181036000830152611f3a81611efe565b905091905056fea26469706673582212209d4c7955b7edffcaf0743d977c8ee8918796cf977eb5d6c090856aab2ff9500e64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100ea5760003560e01c806361064c631161008c578063a14e9fc711610066578063a14e9fc71461021a578063a3b9ba8014610236578063c7551a8d14610269578063f2fde38b14610287576100ea565b806361064c63146101d4578063715018a6146101f25780638da5cb5b146101fc576100ea565b80634b2588ad116100c85780634b2588ad1461015e578063508b01551461017c578063527ea2981461019857806359054590146101b6576100ea565b80630ca958e1146100ef5780631bdfa0cf1461010b5780634047a1d51461013b575b600080fd5b61010960048036038101906101049190611051565b6102a3565b005b610125600480360381019061012091906110f0565b610391565b60405161013291906111b8565b60405180910390f35b6101436103ba565b60405161015596959493929190611202565b60405180910390f35b6101666104f4565b60405161017391906111b8565b60405180910390f35b6101966004803603810190610191919061129d565b610531565b005b6101a06106ff565b6040516101ad91906113e8565b60405180910390f35b6101be610865565b6040516101cb9190611489565b60405180910390f35b6101dc61088b565b6040516101e991906115d0565b60405180910390f35b6101fa610a22565b005b610204610a36565b6040516102119190611613565b60405180910390f35b610234600480360381019061022f919061162e565b610a5f565b005b610250600480360381019061024b91906116e1565b610b44565b604051610260949392919061170e565b60405180910390f35b610271610c94565b60405161027e9190611613565b60405180910390f35b6102a1600480360381019061029c919061178d565b610cbe565b005b600060405180608001604052808681526020018581526020018481526020018381525090506007819080600181540180825580915050600190039060005260206000209060040201600090919091909150600082015181600001908161030991906119bc565b506020820151816001015560408201518160020155606082015181600301908161033391906119bc565b5050503373ffffffffffffffffffffffffffffffffffffffff167f49639324105a63a7f168f4f347c0100c9ec8f24d2e12d1582a820d7e29e25b3e86868686604051610382949392919061170e565b60405180910390a25050505050565b6060816040516020016103a49190611b16565b6040516020818303038152906040529050919050565b60018060000154908060010154908060020154908060030154908060040180546103e3906117e9565b80601f016020809104026020016040519081016040528092919081815260200182805461040f906117e9565b801561045c5780601f106104315761010080835404028352916020019161045c565b820191906000526020600020905b81548152906001019060200180831161043f57829003601f168201915b505050505090806005018054610471906117e9565b80601f016020809104026020016040519081016040528092919081815260200182805461049d906117e9565b80156104ea5780601f106104bf576101008083540402835291602001916104ea565b820191906000526020600020905b8154815290600101906020018083116104cd57829003601f168201915b5050505050905086565b60606040518060400160405280601881526020017f4d6f6e69746f72696e67206c6f63616c2073656e736f72730000000000000000815250905090565b610539610d41565b600073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036105ca576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105c190611b84565b60405180910390fd5b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663716ce05384848460026040518563ffffffff1660e01b815260040161062c9493929190611c1b565b600060405180830381600087803b15801561064657600080fd5b505af1925050508015610657575060015b6106fa57610663611c6d565b806308c379a0036106bd5750610677611c8f565b8061068257506106bf565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106b490611d91565b60405180910390fd5b505b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f190611e23565b60405180910390fd5b505050565b610707610e8b565b60016040518060c00160405290816000820154815260200160018201548152602001600282015481526020016003820154815260200160048201805461074c906117e9565b80601f0160208091040260200160405190810160405280929190818152602001828054610778906117e9565b80156107c55780601f1061079a576101008083540402835291602001916107c5565b820191906000526020600020905b8154815290600101906020018083116107a857829003601f168201915b505050505081526020016005820180546107de906117e9565b80601f016020809104026020016040519081016040528092919081815260200182805461080a906117e9565b80156108575780601f1061082c57610100808354040283529160200191610857565b820191906000526020600020905b81548152906001019060200180831161083a57829003601f168201915b505050505081525050905090565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60606007805480602002602001604051908101604052809291908181526020016000905b82821015610a1957838290600052602060002090600402016040518060800160405290816000820180546108e2906117e9565b80601f016020809104026020016040519081016040528092919081815260200182805461090e906117e9565b801561095b5780601f106109305761010080835404028352916020019161095b565b820191906000526020600020905b81548152906001019060200180831161093e57829003601f168201915b505050505081526020016001820154815260200160028201548152602001600382018054610988906117e9565b80601f01602080910402602001604051908101604052809291908181526020018280546109b4906117e9565b8015610a015780601f106109d657610100808354040283529160200191610a01565b820191906000526020600020905b8154815290600101906020018083116109e457829003601f168201915b505050505081525050815260200190600101906108af565b50505050905090565b610a2a610d41565b610a346000610dbf565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6040518060c00160405280428152602001868152602001858152602001848152602001838152602001828152506001600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004019081610acb91906119bc565b5060a0820151816005019081610ae191906119bc565b509050503373ffffffffffffffffffffffffffffffffffffffff167fac8a15d6303120358858ab94d2154ff143f6545f227448c10742ba83c9acf083428787878787604051610b3596959493929190611202565b60405180910390a25050505050565b60078181548110610b5457600080fd5b9060005260206000209060040201600091509050806000018054610b77906117e9565b80601f0160208091040260200160405190810160405280929190818152602001828054610ba3906117e9565b8015610bf05780601f10610bc557610100808354040283529160200191610bf0565b820191906000526020600020905b815481529060010190602001808311610bd357829003601f168201915b505050505090806001015490806002015490806003018054610c11906117e9565b80601f0160208091040260200160405190810160405280929190818152602001828054610c3d906117e9565b8015610c8a5780601f10610c5f57610100808354040283529160200191610c8a565b820191906000526020600020905b815481529060010190602001808311610c6d57829003601f168201915b5050505050905084565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b610cc6610d41565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610d35576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d2c90611eb5565b60405180910390fd5b610d3e81610dbf565b50565b610d49610e83565b73ffffffffffffffffffffffffffffffffffffffff16610d67610a36565b73ffffffffffffffffffffffffffffffffffffffff1614610dbd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610db490611f21565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b6040518060c001604052806000815260200160008152602001600081526020016000815260200160608152602001606081525090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610f2882610edf565b810181811067ffffffffffffffff82111715610f4757610f46610ef0565b5b80604052505050565b6000610f5a610ec1565b9050610f668282610f1f565b919050565b600067ffffffffffffffff821115610f8657610f85610ef0565b5b610f8f82610edf565b9050602081019050919050565b82818337600083830152505050565b6000610fbe610fb984610f6b565b610f50565b905082815260208101848484011115610fda57610fd9610eda565b5b610fe5848285610f9c565b509392505050565b600082601f83011261100257611001610ed5565b5b8135611012848260208601610fab565b91505092915050565b6000819050919050565b61102e8161101b565b811461103957600080fd5b50565b60008135905061104b81611025565b92915050565b6000806000806080858703121561106b5761106a610ecb565b5b600085013567ffffffffffffffff81111561108957611088610ed0565b5b61109587828801610fed565b94505060206110a68782880161103c565b93505060406110b78782880161103c565b925050606085013567ffffffffffffffff8111156110d8576110d7610ed0565b5b6110e487828801610fed565b91505092959194509250565b60006020828403121561110657611105610ecb565b5b600082013567ffffffffffffffff81111561112457611123610ed0565b5b61113084828501610fed565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611173578082015181840152602081019050611158565b60008484015250505050565b600061118a82611139565b6111948185611144565b93506111a4818560208601611155565b6111ad81610edf565b840191505092915050565b600060208201905081810360008301526111d2818461117f565b905092915050565b6000819050919050565b6111ed816111da565b82525050565b6111fc8161101b565b82525050565b600060c08201905061121760008301896111e4565b61122460208301886111f3565b61123160408301876111f3565b61123e60608301866111e4565b8181036080830152611250818561117f565b905081810360a0830152611264818461117f565b9050979650505050505050565b61127a816111da565b811461128557600080fd5b50565b60008135905061129781611271565b92915050565b6000806000606084860312156112b6576112b5610ecb565b5b60006112c48682870161103c565b93505060206112d58682870161103c565b92505060406112e686828701611288565b9150509250925092565b6112f9816111da565b82525050565b6113088161101b565b82525050565b600082825260208201905092915050565b600061132a82611139565b611334818561130e565b9350611344818560208601611155565b61134d81610edf565b840191505092915050565b600060c08301600083015161137060008601826112f0565b50602083015161138360208601826112ff565b50604083015161139660408601826112ff565b5060608301516113a960608601826112f0565b50608083015184820360808601526113c1828261131f565b91505060a083015184820360a08601526113db828261131f565b9150508091505092915050565b600060208201905081810360008301526114028184611358565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061144f61144a6114458461140a565b61142a565b61140a565b9050919050565b600061146182611434565b9050919050565b600061147382611456565b9050919050565b61148381611468565b82525050565b600060208201905061149e600083018461147a565b92915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600060808301600083015184820360008601526114ed828261131f565b915050602083015161150260208601826112ff565b50604083015161151560408601826112ff565b506060830151848203606086015261152d828261131f565b9150508091505092915050565b600061154683836114d0565b905092915050565b6000602082019050919050565b6000611566826114a4565b61157081856114af565b935083602082028501611582856114c0565b8060005b858110156115be578484038952815161159f858261153a565b94506115aa8361154e565b925060208a01995050600181019050611586565b50829750879550505050505092915050565b600060208201905081810360008301526115ea818461155b565b905092915050565b60006115fd8261140a565b9050919050565b61160d816115f2565b82525050565b60006020820190506116286000830184611604565b92915050565b600080600080600060a0868803121561164a57611649610ecb565b5b60006116588882890161103c565b95505060206116698882890161103c565b945050604061167a88828901611288565b935050606086013567ffffffffffffffff81111561169b5761169a610ed0565b5b6116a788828901610fed565b925050608086013567ffffffffffffffff8111156116c8576116c7610ed0565b5b6116d488828901610fed565b9150509295509295909350565b6000602082840312156116f7576116f6610ecb565b5b600061170584828501611288565b91505092915050565b60006080820190508181036000830152611728818761117f565b905061173760208301866111f3565b61174460408301856111f3565b8181036060830152611756818461117f565b905095945050505050565b61176a816115f2565b811461177557600080fd5b50565b60008135905061178781611761565b92915050565b6000602082840312156117a3576117a2610ecb565b5b60006117b184828501611778565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061180157607f821691505b602082108103611814576118136117ba565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261187c7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8261183f565b611886868361183f565b95508019841693508086168417925050509392505050565b60006118b96118b46118af846111da565b61142a565b6111da565b9050919050565b6000819050919050565b6118d38361189e565b6118e76118df826118c0565b84845461184c565b825550505050565b600090565b6118fc6118ef565b6119078184846118ca565b505050565b5b8181101561192b576119206000826118f4565b60018101905061190d565b5050565b601f821115611970576119418161181a565b61194a8461182f565b81016020851015611959578190505b61196d6119658561182f565b83018261190c565b50505b505050565b600082821c905092915050565b600061199360001984600802611975565b1980831691505092915050565b60006119ac8383611982565b9150826002028217905092915050565b6119c582611139565b67ffffffffffffffff8111156119de576119dd610ef0565b5b6119e882546117e9565b6119f382828561192f565b600060209050601f831160018114611a265760008415611a14578287015190505b611a1e85826119a0565b865550611a86565b601f198416611a348661181a565b60005b82811015611a5c57848901518255600182019150602085019450602081019050611a37565b86831015611a795784890151611a75601f891682611982565b8355505b6001600288020188555050505b505050505050565b600081905092915050565b7f5265706f7274696e67206c6f63616c2064697361737465723a20000000000000600082015250565b6000611acf601a83611a8e565b9150611ada82611a99565b601a82019050919050565b6000611af082611139565b611afa8185611a8e565b9350611b0a818560208601611155565b80840191505092915050565b6000611b2182611ac2565b9150611b2d8284611ae5565b915081905092915050565b7f44697361737465725265676973747279206e6f74207365740000000000000000600082015250565b6000611b6e601883611144565b9150611b7982611b38565b602082019050919050565b60006020820190508181036000830152611b9d81611b61565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60038110611be457611be3611ba4565b5b50565b6000819050611bf582611bd3565b919050565b6000611c0582611be7565b9050919050565b611c1581611bfa565b82525050565b6000608082019050611c3060008301876111f3565b611c3d60208301866111f3565b611c4a60408301856111e4565b611c576060830184611c0c565b95945050505050565b60008160e01c9050919050565b600060033d1115611c8c5760046000803e611c89600051611c60565b90505b90565b600060443d10611d1c57611ca1610ec1565b60043d036004823e80513d602482011167ffffffffffffffff82111715611cc9575050611d1c565b808201805167ffffffffffffffff811115611ce75750505050611d1c565b80602083010160043d038501811115611d04575050505050611d1c565b611d1382602001850186610f1f565b82955050505050505b90565b7f446973617374657252656769737472792e7265706f727444697361737465722060008201527f6661696c65642077697468206572726f72000000000000000000000000000000602082015250565b6000611d7b603183611144565b9150611d8682611d1f565b604082019050919050565b60006020820190508181036000830152611daa81611d6e565b9050919050565b7f446973617374657252656769737472792e7265706f727444697361737465722060008201527f6661696c65642077697468206c6f772d6c6576656c206572726f720000000000602082015250565b6000611e0d603b83611144565b9150611e1882611db1565b604082019050919050565b60006020820190508181036000830152611e3c81611e00565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611e9f602683611144565b9150611eaa82611e43565b604082019050919050565b60006020820190508181036000830152611ece81611e92565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611f0b602083611144565b9150611f1682611ed5565b602082019050919050565b60006020820190508181036000830152611f3a81611efe565b905091905056fea26469706673582212209d4c7955b7edffcaf0743d977c8ee8918796cf977eb5d6c090856aab2ff9500e64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/agents/LocalAgent.sol:LocalAgent",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2112,
        "contract": "contracts/agents/LocalAgent.sol:LocalAgent",
        "label": "latestDroneData",
        "offset": 0,
        "slot": "1",
        "type": "t_struct(DroneData)2100_storage"
      },
      {
        "astId": 2116,
        "contract": "contracts/agents/LocalAgent.sol:LocalAgent",
        "label": "resourceLocations",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_struct(ResourceLocation)2109_storage)dyn_storage"
      },
      {
        "astId": 2119,
        "contract": "contracts/agents/LocalAgent.sol:LocalAgent",
        "label": "disasterRegistry",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(DisasterRegistry)2079"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(ResourceLocation)2109_storage)dyn_storage": {
        "base": "t_struct(ResourceLocation)2109_storage",
        "encoding": "dynamic_array",
        "label": "struct LocalAgent.ResourceLocation[]",
        "numberOfBytes": "32"
      },
      "t_contract(DisasterRegistry)2079": {
        "encoding": "inplace",
        "label": "contract DisasterRegistry",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(DroneData)2100_storage": {
        "encoding": "inplace",
        "label": "struct LocalAgent.DroneData",
        "members": [
          {
            "astId": 2089,
            "contract": "contracts/agents/LocalAgent.sol:LocalAgent",
            "label": "timestamp",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2091,
            "contract": "contracts/agents/LocalAgent.sol:LocalAgent",
            "label": "latitude",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          },
          {
            "astId": 2093,
            "contract": "contracts/agents/LocalAgent.sol:LocalAgent",
            "label": "longitude",
            "offset": 0,
            "slot": "2",
            "type": "t_int256"
          },
          {
            "astId": 2095,
            "contract": "contracts/agents/LocalAgent.sol:LocalAgent",
            "label": "altitude",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2097,
            "contract": "contracts/agents/LocalAgent.sol:LocalAgent",
            "label": "imageDescription",
            "offset": 0,
            "slot": "4",
            "type": "t_string_storage"
          },
          {
            "astId": 2099,
            "contract": "contracts/agents/LocalAgent.sol:LocalAgent",
            "label": "emergencyAnalysis",
            "offset": 0,
            "slot": "5",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(ResourceLocation)2109_storage": {
        "encoding": "inplace",
        "label": "struct LocalAgent.ResourceLocation",
        "members": [
          {
            "astId": 2102,
            "contract": "contracts/agents/LocalAgent.sol:LocalAgent",
            "label": "resourceType",
            "offset": 0,
            "slot": "0",
            "type": "t_string_storage"
          },
          {
            "astId": 2104,
            "contract": "contracts/agents/LocalAgent.sol:LocalAgent",
            "label": "latitude",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          },
          {
            "astId": 2106,
            "contract": "contracts/agents/LocalAgent.sol:LocalAgent",
            "label": "longitude",
            "offset": 0,
            "slot": "2",
            "type": "t_int256"
          },
          {
            "astId": 2108,
            "contract": "contracts/agents/LocalAgent.sol:LocalAgent",
            "label": "description",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}