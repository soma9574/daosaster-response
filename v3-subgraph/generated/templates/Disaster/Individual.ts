// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class TaskAssigned extends ethereum.Event {
  get params(): TaskAssigned__Params {
    return new TaskAssigned__Params(this);
  }
}

export class TaskAssigned__Params {
  _event: TaskAssigned;

  constructor(event: TaskAssigned) {
    this._event = event;
  }

  get task(): string {
    return this._event.parameters[0].value.toString();
  }
}

export class Individual extends ethereum.SmartContract {
  static bind(address: Address): Individual {
    return new Individual("Individual", address);
  }

  isAvailable(): boolean {
    let result = super.call("isAvailable", "isAvailable():(bool)", []);

    return result[0].toBoolean();
  }

  try_isAvailable(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isAvailable", "isAvailable():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  skills(): string {
    let result = super.call("skills", "skills():(string)", []);

    return result[0].toString();
  }

  try_skills(): ethereum.CallResult<string> {
    let result = super.tryCall("skills", "skills():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _skills(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AssignTaskCall extends ethereum.Call {
  get inputs(): AssignTaskCall__Inputs {
    return new AssignTaskCall__Inputs(this);
  }

  get outputs(): AssignTaskCall__Outputs {
    return new AssignTaskCall__Outputs(this);
  }
}

export class AssignTaskCall__Inputs {
  _call: AssignTaskCall;

  constructor(call: AssignTaskCall) {
    this._call = call;
  }

  get _task(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class AssignTaskCall__Outputs {
  _call: AssignTaskCall;

  constructor(call: AssignTaskCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetAvailabilityCall extends ethereum.Call {
  get inputs(): SetAvailabilityCall__Inputs {
    return new SetAvailabilityCall__Inputs(this);
  }

  get outputs(): SetAvailabilityCall__Outputs {
    return new SetAvailabilityCall__Outputs(this);
  }
}

export class SetAvailabilityCall__Inputs {
  _call: SetAvailabilityCall;

  constructor(call: SetAvailabilityCall) {
    this._call = call;
  }

  get _isAvailable(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class SetAvailabilityCall__Outputs {
  _call: SetAvailabilityCall;

  constructor(call: SetAvailabilityCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
